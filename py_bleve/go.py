
# python wrapper for package go within overall package bleve
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build --output=../py_bleve -vm=python3 .

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _bleve

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from bleve import go
# and then refer to everything using go. prefix
# packages imported by this package listed below:


import collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections
	
class GoClass(object):
	"""GoClass is the base class for all GoPy wrapper classes"""
	def __init__(self):
		self.handle = 0

# use go.nil for nil pointers 
nil = GoClass()

# need to explicitly initialize it
def main():
	global nil
	nil = GoClass()

main()

def Init():
	"""calls the GoPyInit function, which runs the 'main' code string that was passed using -main arg to gopy"""
	_bleve.GoPyInit()

	


# ---- Types ---

# Python type for slice []bool
class Slice_bool(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_bool_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_bool.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_bool len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_bool([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_bool_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_bool_len(self.handle)
				return Slice_bool(handle=_bleve.Slice_bool_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_bool_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_bool_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_bool.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_bool_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_bool_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []byte
class Slice_byte(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_byte_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_byte.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_byte len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_byte([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_byte_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_byte_len(self.handle)
				return Slice_byte(handle=_bleve.Slice_byte_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_byte_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_byte_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_byte.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_byte_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_byte_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []error
class Slice_error(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_error_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_error.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_error len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_error([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_error_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_error_len(self.handle)
				return Slice_error(handle=_bleve.Slice_error_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_error_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_error_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_error.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_error_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_error_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []float32
class Slice_float32(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_float32_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_float32.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_float32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_float32([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_float32_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_float32_len(self.handle)
				return Slice_float32(handle=_bleve.Slice_float32_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_float32_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_float32_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_float32.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_float32_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_float32_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []float64
class Slice_float64(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_float64_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_float64.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_float64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_float64([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_float64_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_float64_len(self.handle)
				return Slice_float64(handle=_bleve.Slice_float64_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_float64_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_float64_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_float64.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_float64_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_float64_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int
class Slice_int(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_int_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_int_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_int_len(self.handle)
				return Slice_int(handle=_bleve.Slice_int_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_int_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_int_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_int_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_int_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int16
class Slice_int16(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_int16_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int16.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int16 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int16([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_int16_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_int16_len(self.handle)
				return Slice_int16(handle=_bleve.Slice_int16_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_int16_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_int16_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int16.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_int16_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_int16_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int32
class Slice_int32(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_int32_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int32.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int32([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_int32_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_int32_len(self.handle)
				return Slice_int32(handle=_bleve.Slice_int32_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_int32_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_int32_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int32.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_int32_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_int32_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int64
class Slice_int64(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_int64_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int64.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int64([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_int64_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_int64_len(self.handle)
				return Slice_int64(handle=_bleve.Slice_int64_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_int64_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_int64_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int64.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_int64_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_int64_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int8
class Slice_int8(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_int8_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int8.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int8 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int8([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_int8_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_int8_len(self.handle)
				return Slice_int8(handle=_bleve.Slice_int8_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_int8_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_int8_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int8.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_int8_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_int8_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []rune
class Slice_rune(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_rune_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_rune.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_rune len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_rune([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_rune_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_rune_len(self.handle)
				return Slice_rune(handle=_bleve.Slice_rune_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_rune_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_rune_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_rune.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_rune_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_rune_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []string
class Slice_string(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_string_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_string.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_string len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_string([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_string_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_string_len(self.handle)
				return Slice_string(handle=_bleve.Slice_string_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_string_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_string_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_string.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_string_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_string_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint
class Slice_uint(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_uint_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_uint_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_uint_len(self.handle)
				return Slice_uint(handle=_bleve.Slice_uint_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_uint_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_uint_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_uint_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_uint_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint16
class Slice_uint16(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_uint16_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint16.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint16 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint16([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_uint16_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_uint16_len(self.handle)
				return Slice_uint16(handle=_bleve.Slice_uint16_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_uint16_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_uint16_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint16.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_uint16_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_uint16_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint32
class Slice_uint32(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_uint32_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint32.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint32([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_uint32_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_uint32_len(self.handle)
				return Slice_uint32(handle=_bleve.Slice_uint32_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_uint32_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_uint32_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint32.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_uint32_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_uint32_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint64
class Slice_uint64(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_uint64_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint64.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint64([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_uint64_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_uint64_len(self.handle)
				return Slice_uint64(handle=_bleve.Slice_uint64_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_uint64_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_uint64_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint64.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_uint64_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_uint64_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint8
class Slice_uint8(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.Slice_uint8_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint8.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint8 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint8([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.Slice_uint8_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.Slice_uint8_len(self.handle)
				return Slice_uint8(handle=_bleve.Slice_uint8_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.Slice_uint8_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.Slice_uint8_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint8.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.Slice_uint8_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.Slice_uint8_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# ---- External Types Outside of Targeted Packages ---

# Python type for *analysis.Token
class Ptr_analysis_Token(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *document.CompositeField
class Ptr_document_CompositeField(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *document.Document
class Ptr_document_Document(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *mapping.DocumentMapping
class Ptr_mapping_DocumentMapping(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *mapping.FieldMapping
class Ptr_mapping_FieldMapping(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *mapping.IndexMappingImpl
class Ptr_mapping_IndexMappingImpl(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.AnalyzerCache
class Ptr_registry_AnalyzerCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.Cache
class Ptr_registry_Cache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.CharFilterCache
class Ptr_registry_CharFilterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.DateTimeParserCache
class Ptr_registry_DateTimeParserCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.FragmentFormatterCache
class Ptr_registry_FragmentFormatterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.FragmenterCache
class Ptr_registry_FragmenterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.HighlighterCache
class Ptr_registry_HighlighterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.TokenFilterCache
class Ptr_registry_TokenFilterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.TokenMapCache
class Ptr_registry_TokenMapCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *registry.TokenizerCache
class Ptr_registry_TokenizerCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.DateRangeFacet
class Ptr_search_DateRangeFacet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.DocumentMatch
class Ptr_search_DocumentMatch(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.Explanation
class Ptr_search_Explanation(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.FacetResult
class Ptr_search_FacetResult(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.Location
class Ptr_search_Location(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.NumericRangeFacet
class Ptr_search_NumericRangeFacet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.TermFacet
class Ptr_search_TermFacet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *search.TermFacets
class Ptr_search_TermFacets(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.BoolFieldQuery
class Ptr_query_BoolFieldQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.BooleanQuery
class Ptr_query_BooleanQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.ConjunctionQuery
class Ptr_query_ConjunctionQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.DateRangeQuery
class Ptr_query_DateRangeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.DisjunctionQuery
class Ptr_query_DisjunctionQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.DocIDQuery
class Ptr_query_DocIDQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.FuzzyQuery
class Ptr_query_FuzzyQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.GeoBoundingBoxQuery
class Ptr_query_GeoBoundingBoxQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.GeoDistanceQuery
class Ptr_query_GeoDistanceQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.GeoShapeQuery
class Ptr_query_GeoShapeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.IPRangeQuery
class Ptr_query_IPRangeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.MatchAllQuery
class Ptr_query_MatchAllQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.MatchNoneQuery
class Ptr_query_MatchNoneQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.MatchPhraseQuery
class Ptr_query_MatchPhraseQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.MatchQuery
class Ptr_query_MatchQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.PhraseQuery
class Ptr_query_PhraseQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.PrefixQuery
class Ptr_query_PrefixQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.QueryStringQuery
class Ptr_query_QueryStringQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.RegexpQuery
class Ptr_query_RegexpQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.TermQuery
class Ptr_query_TermQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.TermRangeQuery
class Ptr_query_TermRangeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *query.WildcardQuery
class Ptr_query_WildcardQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *index.TokenFreq
class Ptr_index_TokenFreq(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *index.TokenLocation
class Ptr_index_TokenLocation(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *log.Logger
class Ptr_log_Logger(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for *time.Location
class Ptr_time_Location(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for context.Context
class context_Context(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for analysis.Analyzer
class analysis_Analyzer(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for analysis.CharFilter
class analysis_CharFilter(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for analysis.DateTimeParser
class analysis_DateTimeParser(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for analysis.Token
class analysis_Token(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for analysis.TokenFilter
class analysis_TokenFilter(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for map analysis.TokenMap
class TokenMap(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.analysis_TokenMap_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('analysis_TokenMap.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_bleve.analysis_TokenMap_set(self.handle, k, v)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'bleve.analysis_TokenMap len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'bleve.analysis_TokenMap({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _bleve.analysis_TokenMap_len(self.handle)
	def __getitem__(self, key):
		return _bleve.analysis_TokenMap_elem(self.handle, key)
	def __setitem__(self, key, value):
		_bleve.analysis_TokenMap_set(self.handle, key, value)
	def __delitem__(self, key):
		return _bleve.analysis_TokenMap_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_bleve.analysis_TokenMap_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _bleve.analysis_TokenMap_contains(self.handle, key)

# Python type for slice analysis.TokenStream
class TokenStream(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.analysis_TokenStream_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('analysis_TokenStream.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'analysis.analysis_TokenStream len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'analysis.analysis_TokenStream([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.analysis_TokenStream_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.analysis_TokenStream_len(self.handle)
				return TokenStream(handle=_bleve.analysis_TokenStream_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_analysis_Token(handle=_bleve.analysis_TokenStream_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.analysis_TokenStream_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('analysis_TokenStream.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.analysis_TokenStream_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.analysis_TokenStream_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for analysis.Tokenizer
class analysis_Tokenizer(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for document.CompositeField
class document_CompositeField(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for document.Document
class document_Document(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for document.Field
class document_Field(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for mapping.DocumentMapping
class mapping_DocumentMapping(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for mapping.FieldMapping
class mapping_FieldMapping(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for mapping.IndexMapping
class mapping_IndexMapping(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for mapping.IndexMappingImpl
class mapping_IndexMappingImpl(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.AnalyzerCache
class registry_AnalyzerCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.Cache
class registry_Cache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.CharFilterCache
class registry_CharFilterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.DateTimeParserCache
class registry_DateTimeParserCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.FragmentFormatterCache
class registry_FragmentFormatterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.FragmenterCache
class registry_FragmenterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.HighlighterCache
class registry_HighlighterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.TokenFilterCache
class registry_TokenFilterCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.TokenMapCache
class registry_TokenMapCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for registry.TokenizerCache
class registry_TokenizerCache(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for slice search.ArrayPositions
class ArrayPositions(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_ArrayPositions_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('search_ArrayPositions.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'search.search_ArrayPositions len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'search.search_ArrayPositions([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.search_ArrayPositions_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.search_ArrayPositions_len(self.handle)
				return ArrayPositions(handle=_bleve.search_ArrayPositions_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.search_ArrayPositions_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.search_ArrayPositions_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('search_ArrayPositions.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.search_ArrayPositions_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.search_ArrayPositions_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for search.DateRangeFacet
class search_DateRangeFacet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for slice search.DateRangeFacets
class DateRangeFacets(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_DateRangeFacets_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('search_DateRangeFacets.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'search.search_DateRangeFacets len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'search.search_DateRangeFacets([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.search_DateRangeFacets_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.search_DateRangeFacets_len(self.handle)
				return DateRangeFacets(handle=_bleve.search_DateRangeFacets_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_search_DateRangeFacet(handle=_bleve.search_DateRangeFacets_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.search_DateRangeFacets_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('search_DateRangeFacets.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.search_DateRangeFacets_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.search_DateRangeFacets_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for search.DocumentMatch
class search_DocumentMatch(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for slice search.DocumentMatchCollection
class DocumentMatchCollection(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_DocumentMatchCollection_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('search_DocumentMatchCollection.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'search.search_DocumentMatchCollection len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'search.search_DocumentMatchCollection([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.search_DocumentMatchCollection_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.search_DocumentMatchCollection_len(self.handle)
				return DocumentMatchCollection(handle=_bleve.search_DocumentMatchCollection_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_search_DocumentMatch(handle=_bleve.search_DocumentMatchCollection_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.search_DocumentMatchCollection_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('search_DocumentMatchCollection.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.search_DocumentMatchCollection_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.search_DocumentMatchCollection_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for search.Explanation
class search_Explanation(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for search.FacetResult
class search_FacetResult(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for map search.FacetResults
class FacetResults(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_FacetResults_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('search_FacetResults.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_bleve.search_FacetResults_set(self.handle, k, v)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'bleve.search_FacetResults len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'bleve.search_FacetResults({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _bleve.search_FacetResults_len(self.handle)
	def __getitem__(self, key):
		return go.Ptr_search_FacetResult(handle=_bleve.search_FacetResults_elem(self.handle, key))
	def __setitem__(self, key, value):
		_bleve.search_FacetResults_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _bleve.search_FacetResults_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_bleve.search_FacetResults_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _bleve.search_FacetResults_contains(self.handle, key)

# Python type for map search.FieldFragmentMap
class FieldFragmentMap(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_FieldFragmentMap_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('search_FieldFragmentMap.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_bleve.search_FieldFragmentMap_set(self.handle, k, v)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'bleve.search_FieldFragmentMap len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'bleve.search_FieldFragmentMap({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _bleve.search_FieldFragmentMap_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_string(handle=_bleve.search_FieldFragmentMap_elem(self.handle, key))
	def __setitem__(self, key, value):
		_bleve.search_FieldFragmentMap_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _bleve.search_FieldFragmentMap_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_bleve.search_FieldFragmentMap_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _bleve.search_FieldFragmentMap_contains(self.handle, key)

# Python type for search.FieldTermLocation
class search_FieldTermLocation(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for map search.FieldTermLocationMap
class FieldTermLocationMap(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_FieldTermLocationMap_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('search_FieldTermLocationMap.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_bleve.search_FieldTermLocationMap_set(self.handle, k, v)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'bleve.search_FieldTermLocationMap len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'bleve.search_FieldTermLocationMap({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _bleve.search_FieldTermLocationMap_len(self.handle)
	def __getitem__(self, key):
		return go.search_TermLocationMap(handle=_bleve.search_FieldTermLocationMap_elem(self.handle, key))
	def __setitem__(self, key, value):
		_bleve.search_FieldTermLocationMap_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _bleve.search_FieldTermLocationMap_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_bleve.search_FieldTermLocationMap_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _bleve.search_FieldTermLocationMap_contains(self.handle, key)

# Python type for search.Location
class search_Location(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for slice search.Locations
class Locations(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_Locations_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('search_Locations.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'search.search_Locations len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'search.search_Locations([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.search_Locations_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.search_Locations_len(self.handle)
				return Locations(handle=_bleve.search_Locations_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_search_Location(handle=_bleve.search_Locations_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.search_Locations_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('search_Locations.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.search_Locations_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.search_Locations_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for search.NumericRangeFacet
class search_NumericRangeFacet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for slice search.NumericRangeFacets
class NumericRangeFacets(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_NumericRangeFacets_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('search_NumericRangeFacets.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'search.search_NumericRangeFacets len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'search.search_NumericRangeFacets([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.search_NumericRangeFacets_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.search_NumericRangeFacets_len(self.handle)
				return NumericRangeFacets(handle=_bleve.search_NumericRangeFacets_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_search_NumericRangeFacet(handle=_bleve.search_NumericRangeFacets_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.search_NumericRangeFacets_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('search_NumericRangeFacets.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.search_NumericRangeFacets_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.search_NumericRangeFacets_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for search.SearchSort
class search_SearchSort(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for search.Searcher
class search_Searcher(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for search.SearcherOptions
class search_SearcherOptions(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for slice search.SortOrder
class SortOrder(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_SortOrder_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('search_SortOrder.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'search.search_SortOrder len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'search.search_SortOrder([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.search_SortOrder_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.search_SortOrder_len(self.handle)
				return SortOrder(handle=_bleve.search_SortOrder_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.search_SearchSort(handle=_bleve.search_SortOrder_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.search_SortOrder_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('search_SortOrder.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.search_SortOrder_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.search_SortOrder_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for search.TermFacet
class search_TermFacet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for search.TermFacets
class search_TermFacets(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for map search.TermLocationMap
class TermLocationMap(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.search_TermLocationMap_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('search_TermLocationMap.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_bleve.search_TermLocationMap_set(self.handle, k, v)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'bleve.search_TermLocationMap len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'bleve.search_TermLocationMap({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _bleve.search_TermLocationMap_len(self.handle)
	def __getitem__(self, key):
		return go.search_Locations(handle=_bleve.search_TermLocationMap_elem(self.handle, key))
	def __setitem__(self, key, value):
		_bleve.search_TermLocationMap_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _bleve.search_TermLocationMap_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_bleve.search_TermLocationMap_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _bleve.search_TermLocationMap_contains(self.handle, key)

# Python type for highlight.FragmentFormatter
class highlight_FragmentFormatter(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for highlight.Fragmenter
class highlight_Fragmenter(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for highlight.Highlighter
class highlight_Highlighter(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.BleveQueryTime
class query_BleveQueryTime(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.BoolFieldQuery
class query_BoolFieldQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.BooleanQuery
class query_BooleanQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.ConjunctionQuery
class query_ConjunctionQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.DateRangeQuery
class query_DateRangeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.DisjunctionQuery
class query_DisjunctionQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.DocIDQuery
class query_DocIDQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.FuzzyQuery
class query_FuzzyQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.GeoBoundingBoxQuery
class query_GeoBoundingBoxQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.GeoDistanceQuery
class query_GeoDistanceQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.GeoShapeQuery
class query_GeoShapeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.Geometry
class query_Geometry(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.IPRangeQuery
class query_IPRangeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.MatchAllQuery
class query_MatchAllQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.MatchNoneQuery
class query_MatchNoneQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.MatchPhraseQuery
class query_MatchPhraseQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.MatchQuery
class query_MatchQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.PhraseQuery
class query_PhraseQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.PrefixQuery
class query_PrefixQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.Query
class query_Query(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.QueryStringQuery
class query_QueryStringQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.RegexpQuery
class query_RegexpQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.TermQuery
class query_TermQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.TermRangeQuery
class query_TermRangeQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for query.WildcardQuery
class query_WildcardQuery(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.CompositeField
class index_CompositeField(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.Directory
class index_Directory(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.Document
class index_Document(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.Field
class index_Field(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.FieldDict
class index_FieldDict(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.GeoJSON
class index_GeoJSON(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.Index
class index_Index(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for slice index.IndexInternalID
class IndexInternalID(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.index_IndexInternalID_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('index_IndexInternalID.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'index.index_IndexInternalID len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'index.index_IndexInternalID([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _bleve.index_IndexInternalID_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _bleve.index_IndexInternalID_len(self.handle)
				return IndexInternalID(handle=_bleve.index_IndexInternalID_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _bleve.index_IndexInternalID_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_bleve.index_IndexInternalID_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('index_IndexInternalID.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _bleve.index_IndexInternalID_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_bleve.index_IndexInternalID_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for index.IndexReader
class index_IndexReader(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for index.TokenFreq
class index_TokenFreq(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for map index.TokenFrequencies
class TokenFrequencies(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		else:
			self.handle = _bleve.index_TokenFrequencies_CTor()
			_bleve.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('index_TokenFrequencies.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_bleve.index_TokenFrequencies_set(self.handle, k, v)
	def __del__(self):
		_bleve.DecRef(self.handle)
	def __str__(self):
		s = 'bleve.index_TokenFrequencies len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'bleve.index_TokenFrequencies({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _bleve.index_TokenFrequencies_len(self.handle)
	def __getitem__(self, key):
		return go.Ptr_index_TokenFreq(handle=_bleve.index_TokenFrequencies_elem(self.handle, key))
	def __setitem__(self, key, value):
		_bleve.index_TokenFrequencies_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _bleve.index_TokenFrequencies_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_bleve.index_TokenFrequencies_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _bleve.index_TokenFrequencies_contains(self.handle, key)

# Python type for index.TokenLocation
class index_TokenLocation(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for io.WriteCloser
class io_WriteCloser(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for io.Writer
class io_Writer(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for log.Logger
class log_Logger(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for sort.Interface
class sort_Interface(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for time.Location
class time_Location(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	

# Python type for time.Time
class time_Time(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_bleve.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_bleve.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_bleve.DecRef(self.handle)
	


