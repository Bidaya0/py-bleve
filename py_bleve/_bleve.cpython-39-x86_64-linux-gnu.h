/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/bidaya0/py-bleve/py_bleve */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "bleve.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping map: analysis.TokenMap ---
//
extern long long int analysis_TokenMap_CTor();
extern GoInt analysis_TokenMap_len(long long int handle);
extern char analysis_TokenMap_elem(long long int handle, char* _ky);
extern char analysis_TokenMap_contains(long long int handle, char* _ky);
extern void analysis_TokenMap_set(long long int handle, char* _ky, char _vl);
extern void analysis_TokenMap_delete(long long int handle, char* _ky);
extern long long int analysis_TokenMap_keys(long long int handle);

// --- wrapping slice: analysis.TokenStream ---
//
extern long long int analysis_TokenStream_CTor();
extern GoInt analysis_TokenStream_len(long long int handle);
extern long long int analysis_TokenStream_elem(long long int handle, GoInt _idx);
extern long long int analysis_TokenStream_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void analysis_TokenStream_set(long long int handle, GoInt _idx, long long int _vl);
extern void analysis_TokenStream_append(long long int handle, long long int _vl);

// --- wrapping slice: search.ArrayPositions ---
//
extern long long int search_ArrayPositions_CTor();
extern GoInt search_ArrayPositions_len(long long int handle);
extern long long unsigned int search_ArrayPositions_elem(long long int handle, GoInt _idx);
extern long long int search_ArrayPositions_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void search_ArrayPositions_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void search_ArrayPositions_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: search.DateRangeFacets ---
//
extern long long int search_DateRangeFacets_CTor();
extern GoInt search_DateRangeFacets_len(long long int handle);
extern long long int search_DateRangeFacets_elem(long long int handle, GoInt _idx);
extern long long int search_DateRangeFacets_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void search_DateRangeFacets_set(long long int handle, GoInt _idx, long long int _vl);
extern void search_DateRangeFacets_append(long long int handle, long long int _vl);

// --- wrapping slice: search.DocumentMatchCollection ---
//
extern long long int search_DocumentMatchCollection_CTor();
extern GoInt search_DocumentMatchCollection_len(long long int handle);
extern long long int search_DocumentMatchCollection_elem(long long int handle, GoInt _idx);
extern long long int search_DocumentMatchCollection_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void search_DocumentMatchCollection_set(long long int handle, GoInt _idx, long long int _vl);
extern void search_DocumentMatchCollection_append(long long int handle, long long int _vl);

// --- wrapping map: search.FacetResults ---
//
extern long long int search_FacetResults_CTor();
extern GoInt search_FacetResults_len(long long int handle);
extern long long int search_FacetResults_elem(long long int handle, char* _ky);
extern char search_FacetResults_contains(long long int handle, char* _ky);
extern void search_FacetResults_set(long long int handle, char* _ky, long long int _vl);
extern void search_FacetResults_delete(long long int handle, char* _ky);
extern long long int search_FacetResults_keys(long long int handle);

// --- wrapping map: search.FieldFragmentMap ---
//
extern long long int search_FieldFragmentMap_CTor();
extern GoInt search_FieldFragmentMap_len(long long int handle);
extern long long int search_FieldFragmentMap_elem(long long int handle, char* _ky);
extern char search_FieldFragmentMap_contains(long long int handle, char* _ky);
extern void search_FieldFragmentMap_set(long long int handle, char* _ky, long long int _vl);
extern void search_FieldFragmentMap_delete(long long int handle, char* _ky);
extern long long int search_FieldFragmentMap_keys(long long int handle);

// --- wrapping map: search.FieldTermLocationMap ---
//
extern long long int search_FieldTermLocationMap_CTor();
extern GoInt search_FieldTermLocationMap_len(long long int handle);
extern long long int search_FieldTermLocationMap_elem(long long int handle, char* _ky);
extern char search_FieldTermLocationMap_contains(long long int handle, char* _ky);
extern void search_FieldTermLocationMap_set(long long int handle, char* _ky, long long int _vl);
extern void search_FieldTermLocationMap_delete(long long int handle, char* _ky);
extern long long int search_FieldTermLocationMap_keys(long long int handle);

// --- wrapping slice: search.Locations ---
//
extern long long int search_Locations_CTor();
extern GoInt search_Locations_len(long long int handle);
extern long long int search_Locations_elem(long long int handle, GoInt _idx);
extern long long int search_Locations_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void search_Locations_set(long long int handle, GoInt _idx, long long int _vl);
extern void search_Locations_append(long long int handle, long long int _vl);

// --- wrapping slice: search.NumericRangeFacets ---
//
extern long long int search_NumericRangeFacets_CTor();
extern GoInt search_NumericRangeFacets_len(long long int handle);
extern long long int search_NumericRangeFacets_elem(long long int handle, GoInt _idx);
extern long long int search_NumericRangeFacets_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void search_NumericRangeFacets_set(long long int handle, GoInt _idx, long long int _vl);
extern void search_NumericRangeFacets_append(long long int handle, long long int _vl);

// --- wrapping slice: search.SortOrder ---
//
extern long long int search_SortOrder_CTor();
extern GoInt search_SortOrder_len(long long int handle);
extern long long int search_SortOrder_elem(long long int handle, GoInt _idx);
extern long long int search_SortOrder_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void search_SortOrder_set(long long int handle, GoInt _idx, long long int _vl);
extern void search_SortOrder_append(long long int handle, long long int _vl);

// --- wrapping map: search.TermLocationMap ---
//
extern long long int search_TermLocationMap_CTor();
extern GoInt search_TermLocationMap_len(long long int handle);
extern long long int search_TermLocationMap_elem(long long int handle, char* _ky);
extern char search_TermLocationMap_contains(long long int handle, char* _ky);
extern void search_TermLocationMap_set(long long int handle, char* _ky, long long int _vl);
extern void search_TermLocationMap_delete(long long int handle, char* _ky);
extern long long int search_TermLocationMap_keys(long long int handle);

// --- wrapping slice: index.IndexInternalID ---
//
extern long long int index_IndexInternalID_CTor();
extern GoInt index_IndexInternalID_len(long long int handle);
extern char index_IndexInternalID_elem(long long int handle, GoInt _idx);
extern long long int index_IndexInternalID_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void index_IndexInternalID_set(long long int handle, GoInt _idx, char _vl);
extern void index_IndexInternalID_append(long long int handle, char _vl);

// --- wrapping map: index.TokenFrequencies ---
//
extern long long int index_TokenFrequencies_CTor();
extern GoInt index_TokenFrequencies_len(long long int handle);
extern long long int index_TokenFrequencies_elem(long long int handle, char* _ky);
extern char index_TokenFrequencies_contains(long long int handle, char* _ky);
extern void index_TokenFrequencies_set(long long int handle, char* _ky, long long int _vl);
extern void index_TokenFrequencies_delete(long long int handle, char* _ky);
extern long long int index_TokenFrequencies_keys(long long int handle);

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: []*document.CompositeField ---
//
extern long long int Slice_Ptr_document_CompositeField_CTor();
extern GoInt Slice_Ptr_document_CompositeField_len(long long int handle);
extern long long int Slice_Ptr_document_CompositeField_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_document_CompositeField_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_document_CompositeField_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_document_CompositeField_append(long long int handle, long long int _vl);

// --- wrapping slice: []*mapping.FieldMapping ---
//
extern long long int Slice_Ptr_mapping_FieldMapping_CTor();
extern GoInt Slice_Ptr_mapping_FieldMapping_len(long long int handle);
extern long long int Slice_Ptr_mapping_FieldMapping_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_mapping_FieldMapping_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_mapping_FieldMapping_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_mapping_FieldMapping_append(long long int handle, long long int _vl);

// --- wrapping slice: []*search.Explanation ---
//
extern long long int Slice_Ptr_search_Explanation_CTor();
extern GoInt Slice_Ptr_search_Explanation_len(long long int handle);
extern long long int Slice_Ptr_search_Explanation_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_search_Explanation_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_search_Explanation_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_search_Explanation_append(long long int handle, long long int _vl);

// --- wrapping slice: []*search.TermFacet ---
//
extern long long int Slice_Ptr_search_TermFacet_CTor();
extern GoInt Slice_Ptr_search_TermFacet_len(long long int handle);
extern long long int Slice_Ptr_search_TermFacet_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_search_TermFacet_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_search_TermFacet_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_search_TermFacet_append(long long int handle, long long int _vl);

// --- wrapping slice: []*index.TokenLocation ---
//
extern long long int Slice_Ptr_index_TokenLocation_CTor();
extern GoInt Slice_Ptr_index_TokenLocation_len(long long int handle);
extern long long int Slice_Ptr_index_TokenLocation_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_index_TokenLocation_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_index_TokenLocation_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_index_TokenLocation_append(long long int handle, long long int _vl);

// --- wrapping slice: [][][][][]float64 ---
//
extern long long int Slice_Slice_Slice_Slice_Slice_float64_CTor();
extern GoInt Slice_Slice_Slice_Slice_Slice_float64_len(long long int handle);
extern long long int Slice_Slice_Slice_Slice_Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_Slice_Slice_Slice_Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_Slice_Slice_Slice_float64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Slice_Slice_Slice_Slice_float64_append(long long int handle, long long int _vl);

// --- wrapping slice: [][][][]float64 ---
//
extern long long int Slice_Slice_Slice_Slice_float64_CTor();
extern GoInt Slice_Slice_Slice_Slice_float64_len(long long int handle);
extern long long int Slice_Slice_Slice_Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_Slice_Slice_Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_Slice_Slice_float64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Slice_Slice_Slice_float64_append(long long int handle, long long int _vl);

// --- wrapping slice: [][][]float64 ---
//
extern long long int Slice_Slice_Slice_float64_CTor();
extern GoInt Slice_Slice_Slice_float64_len(long long int handle);
extern long long int Slice_Slice_Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_Slice_Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_Slice_float64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Slice_Slice_float64_append(long long int handle, long long int _vl);

// --- wrapping slice: [][]float64 ---
//
extern long long int Slice_Slice_float64_CTor();
extern GoInt Slice_Slice_float64_len(long long int handle);
extern long long int Slice_Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_float64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Slice_float64_append(long long int handle, long long int _vl);

// --- wrapping slice: []any ---
//
extern long long int Slice_any_CTor();
extern GoInt Slice_any_len(long long int handle);
extern long long int Slice_any_elem(long long int handle, GoInt _idx);
extern long long int Slice_any_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_any_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_any_append(long long int handle, long long int _vl);

// --- wrapping slice: []bleve.Index ---
//
extern long long int Slice_bleve_Index_CTor();
extern GoInt Slice_bleve_Index_len(long long int handle);
extern long long int Slice_bleve_Index_elem(long long int handle, GoInt _idx);
extern long long int Slice_bleve_Index_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bleve_Index_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_bleve_Index_append(long long int handle, long long int _vl);

// --- wrapping slice: []document.Field ---
//
extern long long int Slice_document_Field_CTor();
extern GoInt Slice_document_Field_len(long long int handle);
extern long long int Slice_document_Field_elem(long long int handle, GoInt _idx);
extern long long int Slice_document_Field_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_document_Field_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_document_Field_append(long long int handle, long long int _vl);

// --- wrapping slice: []search.FieldTermLocation ---
//
extern long long int Slice_search_FieldTermLocation_CTor();
extern GoInt Slice_search_FieldTermLocation_len(long long int handle);
extern long long int Slice_search_FieldTermLocation_elem(long long int handle, GoInt _idx);
extern long long int Slice_search_FieldTermLocation_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_search_FieldTermLocation_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_search_FieldTermLocation_append(long long int handle, long long int _vl);

// --- wrapping slice: []search.Location ---
//
extern long long int Slice_search_Location_CTor();
extern GoInt Slice_search_Location_len(long long int handle);
extern long long int Slice_search_Location_elem(long long int handle, GoInt _idx);
extern long long int Slice_search_Location_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_search_Location_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_search_Location_append(long long int handle, long long int _vl);

// --- wrapping slice: []query.Query ---
//
extern long long int Slice_query_Query_CTor();
extern GoInt Slice_query_Query_len(long long int handle);
extern long long int Slice_query_Query_elem(long long int handle, GoInt _idx);
extern long long int Slice_query_Query_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_query_Query_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_query_Query_append(long long int handle, long long int _vl);

// --- wrapping map: map[string]*mapping.DocumentMapping ---
//
extern long long int Map_string_Ptr_mapping_DocumentMapping_CTor();
extern GoInt Map_string_Ptr_mapping_DocumentMapping_len(long long int handle);
extern long long int Map_string_Ptr_mapping_DocumentMapping_elem(long long int handle, char* _ky);
extern char Map_string_Ptr_mapping_DocumentMapping_contains(long long int handle, char* _ky);
extern void Map_string_Ptr_mapping_DocumentMapping_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_Ptr_mapping_DocumentMapping_delete(long long int handle, char* _ky);
extern long long int Map_string_Ptr_mapping_DocumentMapping_keys(long long int handle);

// --- wrapping map: map[string]interface{} ---
//
extern long long int Map_string_interface__CTor();
extern GoInt Map_string_interface__len(long long int handle);
extern char* Map_string_interface__elem(long long int handle, char* _ky);
extern char Map_string_interface__contains(long long int handle, char* _ky);
extern void Map_string_interface__set(long long int handle, char* _ky, char* _vl);
extern void Map_string_interface__delete(long long int handle, char* _ky);
extern long long int Map_string_interface__keys(long long int handle);
extern char* bleve_Builder_Close(long long int _handle);
extern char* bleve_Builder_Index(long long int _handle, char* id, char* data);
extern long long int bleve_Index_Advanced(long long int _handle);
extern char* bleve_Index_Batch(long long int _handle, long long int b);
extern char* bleve_Index_Close(long long int _handle);
extern char* bleve_Index_Delete(long long int _handle, char* id);
extern char* bleve_Index_DeleteInternal(long long int _handle, long long int key);
extern long long unsigned int bleve_Index_DocCount(long long int _handle);
extern long long int bleve_Index_Document(long long int _handle, char* id);
extern long long int bleve_Index_FieldDict(long long int _handle, char* field);
extern long long int bleve_Index_FieldDictPrefix(long long int _handle, char* field, long long int termPrefix);
extern long long int bleve_Index_FieldDictRange(long long int _handle, char* field, long long int startTerm, long long int endTerm);
extern long long int bleve_Index_Fields(long long int _handle);
extern long long int bleve_Index_GetInternal(long long int _handle, long long int key);
extern char* bleve_Index_Index(long long int _handle, char* id, char* data);
extern long long int bleve_Index_Mapping(long long int _handle);
extern char* bleve_Index_Name(long long int _handle);
extern long long int bleve_Index_NewBatch(long long int _handle);
extern long long int bleve_Index_Search(long long int _handle, long long int req);
extern long long int bleve_Index_SearchInContext(long long int _handle, long long int ctx, long long int req);
extern char* bleve_Index_SetInternal(long long int _handle, long long int key, long long int val);
extern void bleve_Index_SetName(long long int _handle, char* arg_0, char goRun);
extern long long int bleve_Index_Stats(long long int _handle);
extern long long int bleve_Index_StatsMap(long long int _handle);
extern void bleve_IndexAlias_Add(long long int _handle, long long int i, char goRun);
extern long long int bleve_IndexAlias_Advanced(long long int _handle);
extern char* bleve_IndexAlias_Batch(long long int _handle, long long int b);
extern char* bleve_IndexAlias_Close(long long int _handle);
extern char* bleve_IndexAlias_Delete(long long int _handle, char* id);
extern char* bleve_IndexAlias_DeleteInternal(long long int _handle, long long int key);
extern long long unsigned int bleve_IndexAlias_DocCount(long long int _handle);
extern long long int bleve_IndexAlias_Document(long long int _handle, char* id);
extern long long int bleve_IndexAlias_FieldDict(long long int _handle, char* field);
extern long long int bleve_IndexAlias_FieldDictPrefix(long long int _handle, char* field, long long int termPrefix);
extern long long int bleve_IndexAlias_FieldDictRange(long long int _handle, char* field, long long int startTerm, long long int endTerm);
extern long long int bleve_IndexAlias_Fields(long long int _handle);
extern long long int bleve_IndexAlias_GetInternal(long long int _handle, long long int key);
extern char* bleve_IndexAlias_Index(long long int _handle, char* id, char* data);
extern long long int bleve_IndexAlias_Mapping(long long int _handle);
extern char* bleve_IndexAlias_Name(long long int _handle);
extern long long int bleve_IndexAlias_NewBatch(long long int _handle);
extern void bleve_IndexAlias_Remove(long long int _handle, long long int i, char goRun);
extern long long int bleve_IndexAlias_Search(long long int _handle, long long int req);
extern long long int bleve_IndexAlias_SearchInContext(long long int _handle, long long int ctx, long long int req);
extern char* bleve_IndexAlias_SetInternal(long long int _handle, long long int key, long long int val);
extern void bleve_IndexAlias_SetName(long long int _handle, char* arg_0, char goRun);
extern long long int bleve_IndexAlias_Stats(long long int _handle);
extern long long int bleve_IndexAlias_StatsMap(long long int _handle);
extern void bleve_IndexAlias_Swap(long long int _handle, long long int myin, long long int out, char goRun);
extern char* bleve_IndexCopyable_CopyTo(long long int _handle, long long int d);

// --- wrapping struct: bleve.SearchRequest ---
//
extern long long int bleve_SearchRequest_CTor();
extern long long int bleve_SearchRequest_Query_Get(long long int handle);
extern void bleve_SearchRequest_Query_Set(long long int handle, long long int val);
extern long long int bleve_SearchRequest_Size_Get(long long int handle);
extern void bleve_SearchRequest_Size_Set(long long int handle, long long int val);
extern long long int bleve_SearchRequest_From_Get(long long int handle);
extern void bleve_SearchRequest_From_Set(long long int handle, long long int val);
extern long long int bleve_SearchRequest_Highlight_Get(long long int handle);
extern void bleve_SearchRequest_Highlight_Set(long long int handle, long long int val);
extern long long int bleve_SearchRequest_Fields_Get(long long int handle);
extern void bleve_SearchRequest_Fields_Set(long long int handle, long long int val);
extern long long int bleve_SearchRequest_Facets_Get(long long int handle);
extern void bleve_SearchRequest_Facets_Set(long long int handle, long long int val);
extern char bleve_SearchRequest_Explain_Get(long long int handle);
extern void bleve_SearchRequest_Explain_Set(long long int handle, char val);
extern long long int bleve_SearchRequest_Sort_Get(long long int handle);
extern void bleve_SearchRequest_Sort_Set(long long int handle, long long int val);
extern char bleve_SearchRequest_IncludeLocations_Get(long long int handle);
extern void bleve_SearchRequest_IncludeLocations_Set(long long int handle, char val);
extern char* bleve_SearchRequest_Score_Get(long long int handle);
extern void bleve_SearchRequest_Score_Set(long long int handle, char* val);
extern long long int bleve_SearchRequest_SearchAfter_Get(long long int handle);
extern void bleve_SearchRequest_SearchAfter_Set(long long int handle, long long int val);
extern long long int bleve_SearchRequest_SearchBefore_Get(long long int handle);
extern void bleve_SearchRequest_SearchBefore_Set(long long int handle, long long int val);
extern char* bleve_SearchRequest_Validate(long long int _handle);
extern void bleve_SearchRequest_AddFacet(long long int _handle, char* facetName, long long int f, char goRun);
extern void bleve_SearchRequest_SortBy(long long int _handle, long long int order, char goRun);
extern void bleve_SearchRequest_SortByCustom(long long int _handle, long long int order, char goRun);
extern void bleve_SearchRequest_SetSearchAfter(long long int _handle, long long int after, char goRun);
extern void bleve_SearchRequest_SetSearchBefore(long long int _handle, long long int before, char goRun);
extern char* bleve_SearchRequest_UnmarshalJSON(long long int _handle, long long int input);
extern void bleve_SearchRequest_SetSortFunc(long long int _handle, PyObject* s, char goRun);

// --- wrapping struct: bleve.SearchResult ---
//
extern long long int bleve_SearchResult_CTor();
extern long long int bleve_SearchResult_Status_Get(long long int handle);
extern void bleve_SearchResult_Status_Set(long long int handle, long long int val);
extern long long int bleve_SearchResult_Request_Get(long long int handle);
extern void bleve_SearchResult_Request_Set(long long int handle, long long int val);
extern long long int bleve_SearchResult_Hits_Get(long long int handle);
extern void bleve_SearchResult_Hits_Set(long long int handle, long long int val);
extern long long unsigned int bleve_SearchResult_Total_Get(long long int handle);
extern void bleve_SearchResult_Total_Set(long long int handle, long long unsigned int val);
extern long long unsigned int bleve_SearchResult_Cost_Get(long long int handle);
extern void bleve_SearchResult_Cost_Set(long long int handle, long long unsigned int val);
extern double bleve_SearchResult_MaxScore_Get(long long int handle);
extern void bleve_SearchResult_MaxScore_Set(long long int handle, double val);
extern long long int bleve_SearchResult_Took_Get(long long int handle);
extern void bleve_SearchResult_Took_Set(long long int handle, long long int val);
extern long long int bleve_SearchResult_Facets_Get(long long int handle);
extern void bleve_SearchResult_Facets_Set(long long int handle, long long int val);
extern long long int bleve_SearchResult_Size(long long int _handle);
extern char* bleve_SearchResult_String(long long int _handle);
extern void bleve_SearchResult_Merge(long long int _handle, long long int other, char goRun);

// --- wrapping struct: bleve.SearchStatus ---
//
extern long long int bleve_SearchStatus_CTor();
extern long long int bleve_SearchStatus_Total_Get(long long int handle);
extern void bleve_SearchStatus_Total_Set(long long int handle, long long int val);
extern long long int bleve_SearchStatus_Failed_Get(long long int handle);
extern void bleve_SearchStatus_Failed_Set(long long int handle, long long int val);
extern long long int bleve_SearchStatus_Successful_Get(long long int handle);
extern void bleve_SearchStatus_Successful_Set(long long int handle, long long int val);
extern long long int bleve_SearchStatus_Errors_Get(long long int handle);
extern void bleve_SearchStatus_Errors_Set(long long int handle, long long int val);
extern void bleve_SearchStatus_Merge(long long int _handle, long long int other, char goRun);

// --- wrapping struct: bleve.Batch ---
//
extern long long int bleve_Batch_CTor();
extern char* bleve_Batch_Index(long long int _handle, char* id, char* data);
extern long long unsigned int bleve_Batch_LastDocSize(long long int _handle);
extern long long unsigned int bleve_Batch_TotalDocsSize(long long int _handle);
extern char* bleve_Batch_IndexAdvanced(long long int _handle, long long int doc);
extern void bleve_Batch_Delete(long long int _handle, char* id, char goRun);
extern void bleve_Batch_SetInternal(long long int _handle, long long int key, long long int val, char goRun);
extern void bleve_Batch_DeleteInternal(long long int _handle, long long int key, char goRun);
extern long long int bleve_Batch_Size(long long int _handle);
extern char* bleve_Batch_String(long long int _handle);
extern void bleve_Batch_Reset(long long int _handle, char goRun);
extern void bleve_Batch_Merge(long long int _handle, long long int o, char goRun);

// --- wrapping struct: bleve.FacetRequest ---
//
extern long long int bleve_FacetRequest_CTor();
extern long long int bleve_FacetRequest_Size_Get(long long int handle);
extern void bleve_FacetRequest_Size_Set(long long int handle, long long int val);
extern char* bleve_FacetRequest_Field_Get(long long int handle);
extern void bleve_FacetRequest_Field_Set(long long int handle, char* val);
extern char* bleve_FacetRequest_Validate(long long int _handle);
extern void bleve_FacetRequest_AddDateTimeRange(long long int _handle, char* name, long long int start, long long int end, char goRun);

// --- wrapping struct: bleve.HighlightRequest ---
//
extern long long int bleve_HighlightRequest_CTor();
extern long long int bleve_HighlightRequest_Fields_Get(long long int handle);
extern void bleve_HighlightRequest_Fields_Set(long long int handle, long long int val);
extern void bleve_HighlightRequest_AddField(long long int _handle, char* field, char goRun);

// --- wrapping struct: bleve.IndexStat ---
//
extern long long int bleve_IndexStat_CTor();
extern long long int bleve_IndexStat_MarshalJSON(long long int _handle);

// --- wrapping struct: bleve.IndexStats ---
//
extern long long int bleve_IndexStats_CTor();
extern void bleve_IndexStats_Register(long long int _handle, long long int index, char goRun);
extern void bleve_IndexStats_UnRegister(long long int _handle, long long int index, char goRun);
extern char* bleve_IndexStats_String(long long int _handle);

// --- wrapping map: bleve.FacetsRequest ---
//
extern long long int bleve_FacetsRequest_CTor();
extern GoInt bleve_FacetsRequest_len(long long int handle);
extern long long int bleve_FacetsRequest_elem(long long int handle, char* _ky);
extern char bleve_FacetsRequest_contains(long long int handle, char* _ky);
extern void bleve_FacetsRequest_set(long long int handle, char* _ky, long long int _vl);
extern void bleve_FacetsRequest_delete(long long int handle, char* _ky);
extern long long int bleve_FacetsRequest_keys(long long int handle);
extern char* bleve_FacetsRequest_Validate(long long int _handle);

// --- wrapping map: bleve.IndexErrMap ---
//
extern long long int bleve_IndexErrMap_CTor();
extern GoInt bleve_IndexErrMap_len(long long int handle);
extern char* bleve_IndexErrMap_elem(long long int handle, char* _ky);
extern char bleve_IndexErrMap_contains(long long int handle, char* _ky);
extern void bleve_IndexErrMap_set(long long int handle, char* _ky, char* _vl);
extern void bleve_IndexErrMap_delete(long long int handle, char* _ky);
extern long long int bleve_IndexErrMap_keys(long long int handle);
extern long long int bleve_IndexErrMap_MarshalJSON(long long int _handle);
extern char* bleve_IndexErrMap_UnmarshalJSON(long long int _handle, long long int data);
extern long long int bleve_NewSearchRequestOptions(long long int q, long long int size, long long int myfrom, char explain);
extern long long int bleve_NewSearchRequest(long long int q);
extern long long int bleve_MultiSearch(long long int ctx, long long int req, long long int indexes);
extern long long int bleve_NewFacetRequest(char* field, long long int size);
extern long long int bleve_NewHighlightWithStyle(char* style);
extern long long int bleve_NewHighlight();
extern long long int bleve_NewIndexStats();
extern long long int bleve_NewMatchQuery(char* match);
extern long long int bleve_NewDocumentDisabledMapping();
extern long long int bleve_NewDocumentMapping();
extern long long int bleve_NewIPFieldMapping();
extern long long int bleve_NewMatchAllQuery();
extern long long int bleve_NewIndexMapping();
extern long long int bleve_NewMatchPhraseQuery(char* matchPhrase);
extern long long int bleve_NewRegexpQuery(char* regexp);
extern long long int bleve_NewBoolFieldQuery(char val);
extern long long int bleve_NewFuzzyQuery(char* term);
extern long long int bleve_NewGeoPointFieldMapping();
extern long long int bleve_NewMatchNoneQuery();
extern long long int bleve_NewPhraseQuery(long long int terms, char* field);
extern long long int bleve_Open(char* path);
extern long long int bleve_NewGeoBoundingBoxQuery(double topLeftLon, double topLeftLat, double bottomRightLon, double bottomRightLat);
extern long long int bleve_NewGeoShapeCircleQuery(long long int coordinates, char* radius, char* relation);
extern long long int bleve_NewGeoShapeQuery(long long int coordinates, char* typ, char* relation);
extern long long int bleve_OpenUsing(char* path, long long int runtimeConfig);
extern long long int bleve_NewQueryStringQuery(char* q);
extern long long int bleve_NewTermQuery(char* term);
extern long long int bleve_NewDateTimeFieldMapping();
extern long long int bleve_NewDocIDQuery(long long int ids);
extern long long int bleve_NewGeoDistanceQuery(double lon, double lat, char* distance);
extern long long int bleve_NewIPRangeQuery(char* cidr);
extern long long int bleve_NewNumericFieldMapping();
extern long long int bleve_NewPrefixQuery(char* prefix);
extern void bleve_SetLog(long long int l, char goRun);
extern long long unsigned int bleve_MemoryNeededForSearchResult(long long int req);
extern long long int bleve_NewBooleanQuery();
extern long long int bleve_NewGeoShapeFieldMapping();
extern long long int bleve_NewTextFieldMapping();
extern long long int bleve_NewMemOnly(long long int mapping);
extern long long int bleve_NewTermRangeQuery(char* min, char* max);
extern long long int bleve_New(char* path, long long int mapping);
extern long long int bleve_NewConjunctionQuery(long long int conjuncts);
extern long long int bleve_NewDateRangeQuery(long long int start, long long int end);
extern long long int bleve_NewDocumentStaticMapping();
extern long long int bleve_NewKeywordFieldMapping();
extern long long int bleve_NewUsing(char* path, long long int mapping, char* indexType, char* kvstore, long long int kvconfig);
extern long long int bleve_NewWildcardQuery(char* wildcard);
extern long long int bleve_NewBooleanFieldMapping();
extern long long int bleve_NewBuilder(char* path, long long int mapping, long long int config);
extern long long int bleve_NewDisjunctionQuery(long long int disjuncts);
extern long long int bleve_NewGeometryCollectionQuery(long long int coordinates, long long int types, char* relation);

#ifdef __cplusplus
}
#endif
