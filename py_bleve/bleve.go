/*
cgo stubs for package bleve.
File is generated by gopy. Do not edit.
gopy build --output=../py_bleve -vm=python3 .
*/

package main

/*

#cgo CFLAGS: -I/usr/include/python3.9 -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: -L/usr/lib -lpython3.9 -lcrypt -lpthread -ldl  -lutil -lm -lm

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"fmt"
	"reflect"
	"unsafe"

	"github.com/go-python/gopy/gopyh" // handler

	"context"
	"io"
	"log"
	"sort"
	"time"

	bleve "github.com/blevesearch/bleve/v2"
	"github.com/blevesearch/bleve/v2/analysis"
	"github.com/blevesearch/bleve/v2/document"
	"github.com/blevesearch/bleve/v2/mapping"
	"github.com/blevesearch/bleve/v2/registry"
	"github.com/blevesearch/bleve/v2/search"
	"github.com/blevesearch/bleve/v2/search/highlight"
	"github.com/blevesearch/bleve/v2/search/query"
	index "github.com/blevesearch/bleve_index_api"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: bleve below: ---

// ---- External Types Outside of Targeted Packages ---

// Converters for pointer handles for type: *analysis.Token
func ptrFromHandle_Ptr_analysis_Token(h CGoHandle) *analysis.Token {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*analysis.Token")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(analysis.Token{})).(*analysis.Token)
}
func handleFromPtr_Ptr_analysis_Token(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*analysis.Token", p))
}

// Converters for pointer handles for type: *document.CompositeField
func ptrFromHandle_Ptr_document_CompositeField(h CGoHandle) *document.CompositeField {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*document.CompositeField")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(document.CompositeField{})).(*document.CompositeField)
}
func handleFromPtr_Ptr_document_CompositeField(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*document.CompositeField", p))
}

// Converters for pointer handles for type: *document.Document
func ptrFromHandle_Ptr_document_Document(h CGoHandle) *document.Document {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*document.Document")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(document.Document{})).(*document.Document)
}
func handleFromPtr_Ptr_document_Document(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*document.Document", p))
}

// Converters for pointer handles for type: *mapping.DocumentMapping
func ptrFromHandle_Ptr_mapping_DocumentMapping(h CGoHandle) *mapping.DocumentMapping {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*mapping.DocumentMapping")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(mapping.DocumentMapping{})).(*mapping.DocumentMapping)
}
func handleFromPtr_Ptr_mapping_DocumentMapping(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*mapping.DocumentMapping", p))
}

// Converters for pointer handles for type: *mapping.FieldMapping
func ptrFromHandle_Ptr_mapping_FieldMapping(h CGoHandle) *mapping.FieldMapping {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*mapping.FieldMapping")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(mapping.FieldMapping{})).(*mapping.FieldMapping)
}
func handleFromPtr_Ptr_mapping_FieldMapping(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*mapping.FieldMapping", p))
}

// Converters for pointer handles for type: *mapping.IndexMappingImpl
func ptrFromHandle_Ptr_mapping_IndexMappingImpl(h CGoHandle) *mapping.IndexMappingImpl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*mapping.IndexMappingImpl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(mapping.IndexMappingImpl{})).(*mapping.IndexMappingImpl)
}
func handleFromPtr_Ptr_mapping_IndexMappingImpl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*mapping.IndexMappingImpl", p))
}

// Converters for pointer handles for type: *registry.AnalyzerCache
func ptrFromHandle_Ptr_registry_AnalyzerCache(h CGoHandle) *registry.AnalyzerCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.AnalyzerCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.AnalyzerCache{})).(*registry.AnalyzerCache)
}
func handleFromPtr_Ptr_registry_AnalyzerCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.AnalyzerCache", p))
}

// Converters for pointer handles for type: *registry.Cache
func ptrFromHandle_Ptr_registry_Cache(h CGoHandle) *registry.Cache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.Cache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.Cache{})).(*registry.Cache)
}
func handleFromPtr_Ptr_registry_Cache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.Cache", p))
}

// Converters for pointer handles for type: *registry.CharFilterCache
func ptrFromHandle_Ptr_registry_CharFilterCache(h CGoHandle) *registry.CharFilterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.CharFilterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.CharFilterCache{})).(*registry.CharFilterCache)
}
func handleFromPtr_Ptr_registry_CharFilterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.CharFilterCache", p))
}

// Converters for pointer handles for type: *registry.DateTimeParserCache
func ptrFromHandle_Ptr_registry_DateTimeParserCache(h CGoHandle) *registry.DateTimeParserCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.DateTimeParserCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.DateTimeParserCache{})).(*registry.DateTimeParserCache)
}
func handleFromPtr_Ptr_registry_DateTimeParserCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.DateTimeParserCache", p))
}

// Converters for pointer handles for type: *registry.FragmentFormatterCache
func ptrFromHandle_Ptr_registry_FragmentFormatterCache(h CGoHandle) *registry.FragmentFormatterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.FragmentFormatterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.FragmentFormatterCache{})).(*registry.FragmentFormatterCache)
}
func handleFromPtr_Ptr_registry_FragmentFormatterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.FragmentFormatterCache", p))
}

// Converters for pointer handles for type: *registry.FragmenterCache
func ptrFromHandle_Ptr_registry_FragmenterCache(h CGoHandle) *registry.FragmenterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.FragmenterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.FragmenterCache{})).(*registry.FragmenterCache)
}
func handleFromPtr_Ptr_registry_FragmenterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.FragmenterCache", p))
}

// Converters for pointer handles for type: *registry.HighlighterCache
func ptrFromHandle_Ptr_registry_HighlighterCache(h CGoHandle) *registry.HighlighterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.HighlighterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.HighlighterCache{})).(*registry.HighlighterCache)
}
func handleFromPtr_Ptr_registry_HighlighterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.HighlighterCache", p))
}

// Converters for pointer handles for type: *registry.TokenFilterCache
func ptrFromHandle_Ptr_registry_TokenFilterCache(h CGoHandle) *registry.TokenFilterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.TokenFilterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.TokenFilterCache{})).(*registry.TokenFilterCache)
}
func handleFromPtr_Ptr_registry_TokenFilterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.TokenFilterCache", p))
}

// Converters for pointer handles for type: *registry.TokenMapCache
func ptrFromHandle_Ptr_registry_TokenMapCache(h CGoHandle) *registry.TokenMapCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.TokenMapCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.TokenMapCache{})).(*registry.TokenMapCache)
}
func handleFromPtr_Ptr_registry_TokenMapCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.TokenMapCache", p))
}

// Converters for pointer handles for type: *registry.TokenizerCache
func ptrFromHandle_Ptr_registry_TokenizerCache(h CGoHandle) *registry.TokenizerCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*registry.TokenizerCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.TokenizerCache{})).(*registry.TokenizerCache)
}
func handleFromPtr_Ptr_registry_TokenizerCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*registry.TokenizerCache", p))
}

// Converters for pointer handles for type: *search.DateRangeFacet
func ptrFromHandle_Ptr_search_DateRangeFacet(h CGoHandle) *search.DateRangeFacet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.DateRangeFacet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.DateRangeFacet{})).(*search.DateRangeFacet)
}
func handleFromPtr_Ptr_search_DateRangeFacet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.DateRangeFacet", p))
}

// Converters for pointer handles for type: *search.DocumentMatch
func ptrFromHandle_Ptr_search_DocumentMatch(h CGoHandle) *search.DocumentMatch {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.DocumentMatch")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.DocumentMatch{})).(*search.DocumentMatch)
}
func handleFromPtr_Ptr_search_DocumentMatch(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.DocumentMatch", p))
}

// Converters for pointer handles for type: *search.Explanation
func ptrFromHandle_Ptr_search_Explanation(h CGoHandle) *search.Explanation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.Explanation")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.Explanation{})).(*search.Explanation)
}
func handleFromPtr_Ptr_search_Explanation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.Explanation", p))
}

// Converters for pointer handles for type: *search.FacetResult
func ptrFromHandle_Ptr_search_FacetResult(h CGoHandle) *search.FacetResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.FacetResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.FacetResult{})).(*search.FacetResult)
}
func handleFromPtr_Ptr_search_FacetResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.FacetResult", p))
}

// Converters for pointer handles for type: *search.Location
func ptrFromHandle_Ptr_search_Location(h CGoHandle) *search.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.Location{})).(*search.Location)
}
func handleFromPtr_Ptr_search_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.Location", p))
}

// Converters for pointer handles for type: *search.NumericRangeFacet
func ptrFromHandle_Ptr_search_NumericRangeFacet(h CGoHandle) *search.NumericRangeFacet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.NumericRangeFacet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.NumericRangeFacet{})).(*search.NumericRangeFacet)
}
func handleFromPtr_Ptr_search_NumericRangeFacet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.NumericRangeFacet", p))
}

// Converters for pointer handles for type: *search.TermFacet
func ptrFromHandle_Ptr_search_TermFacet(h CGoHandle) *search.TermFacet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.TermFacet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.TermFacet{})).(*search.TermFacet)
}
func handleFromPtr_Ptr_search_TermFacet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.TermFacet", p))
}

// Converters for pointer handles for type: *search.TermFacets
func ptrFromHandle_Ptr_search_TermFacets(h CGoHandle) *search.TermFacets {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*search.TermFacets")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.TermFacets{})).(*search.TermFacets)
}
func handleFromPtr_Ptr_search_TermFacets(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*search.TermFacets", p))
}

// Converters for pointer handles for type: *query.BoolFieldQuery
func ptrFromHandle_Ptr_query_BoolFieldQuery(h CGoHandle) *query.BoolFieldQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.BoolFieldQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.BoolFieldQuery{})).(*query.BoolFieldQuery)
}
func handleFromPtr_Ptr_query_BoolFieldQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.BoolFieldQuery", p))
}

// Converters for pointer handles for type: *query.BooleanQuery
func ptrFromHandle_Ptr_query_BooleanQuery(h CGoHandle) *query.BooleanQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.BooleanQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.BooleanQuery{})).(*query.BooleanQuery)
}
func handleFromPtr_Ptr_query_BooleanQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.BooleanQuery", p))
}

// Converters for pointer handles for type: *query.Boost
func ptrFromHandle_Ptr_query_Boost(h CGoHandle) *query.Boost {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.Boost")
	if p == nil {
		return nil
	}
	return p.(*query.Boost)
}
func handleFromPtr_Ptr_query_Boost(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.Boost", p))
}

// Converters for pointer handles for type: *query.ConjunctionQuery
func ptrFromHandle_Ptr_query_ConjunctionQuery(h CGoHandle) *query.ConjunctionQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.ConjunctionQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.ConjunctionQuery{})).(*query.ConjunctionQuery)
}
func handleFromPtr_Ptr_query_ConjunctionQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.ConjunctionQuery", p))
}

// Converters for pointer handles for type: *query.DateRangeQuery
func ptrFromHandle_Ptr_query_DateRangeQuery(h CGoHandle) *query.DateRangeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.DateRangeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.DateRangeQuery{})).(*query.DateRangeQuery)
}
func handleFromPtr_Ptr_query_DateRangeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.DateRangeQuery", p))
}

// Converters for pointer handles for type: *query.DisjunctionQuery
func ptrFromHandle_Ptr_query_DisjunctionQuery(h CGoHandle) *query.DisjunctionQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.DisjunctionQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.DisjunctionQuery{})).(*query.DisjunctionQuery)
}
func handleFromPtr_Ptr_query_DisjunctionQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.DisjunctionQuery", p))
}

// Converters for pointer handles for type: *query.DocIDQuery
func ptrFromHandle_Ptr_query_DocIDQuery(h CGoHandle) *query.DocIDQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.DocIDQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.DocIDQuery{})).(*query.DocIDQuery)
}
func handleFromPtr_Ptr_query_DocIDQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.DocIDQuery", p))
}

// Converters for pointer handles for type: *query.FuzzyQuery
func ptrFromHandle_Ptr_query_FuzzyQuery(h CGoHandle) *query.FuzzyQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.FuzzyQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.FuzzyQuery{})).(*query.FuzzyQuery)
}
func handleFromPtr_Ptr_query_FuzzyQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.FuzzyQuery", p))
}

// Converters for pointer handles for type: *query.GeoBoundingBoxQuery
func ptrFromHandle_Ptr_query_GeoBoundingBoxQuery(h CGoHandle) *query.GeoBoundingBoxQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.GeoBoundingBoxQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.GeoBoundingBoxQuery{})).(*query.GeoBoundingBoxQuery)
}
func handleFromPtr_Ptr_query_GeoBoundingBoxQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.GeoBoundingBoxQuery", p))
}

// Converters for pointer handles for type: *query.GeoDistanceQuery
func ptrFromHandle_Ptr_query_GeoDistanceQuery(h CGoHandle) *query.GeoDistanceQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.GeoDistanceQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.GeoDistanceQuery{})).(*query.GeoDistanceQuery)
}
func handleFromPtr_Ptr_query_GeoDistanceQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.GeoDistanceQuery", p))
}

// Converters for pointer handles for type: *query.GeoShapeQuery
func ptrFromHandle_Ptr_query_GeoShapeQuery(h CGoHandle) *query.GeoShapeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.GeoShapeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.GeoShapeQuery{})).(*query.GeoShapeQuery)
}
func handleFromPtr_Ptr_query_GeoShapeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.GeoShapeQuery", p))
}

// Converters for pointer handles for type: *query.IPRangeQuery
func ptrFromHandle_Ptr_query_IPRangeQuery(h CGoHandle) *query.IPRangeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.IPRangeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.IPRangeQuery{})).(*query.IPRangeQuery)
}
func handleFromPtr_Ptr_query_IPRangeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.IPRangeQuery", p))
}

// Converters for pointer handles for type: *query.MatchAllQuery
func ptrFromHandle_Ptr_query_MatchAllQuery(h CGoHandle) *query.MatchAllQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.MatchAllQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchAllQuery{})).(*query.MatchAllQuery)
}
func handleFromPtr_Ptr_query_MatchAllQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.MatchAllQuery", p))
}

// Converters for pointer handles for type: *query.MatchNoneQuery
func ptrFromHandle_Ptr_query_MatchNoneQuery(h CGoHandle) *query.MatchNoneQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.MatchNoneQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchNoneQuery{})).(*query.MatchNoneQuery)
}
func handleFromPtr_Ptr_query_MatchNoneQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.MatchNoneQuery", p))
}

// Converters for pointer handles for type: *query.MatchPhraseQuery
func ptrFromHandle_Ptr_query_MatchPhraseQuery(h CGoHandle) *query.MatchPhraseQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.MatchPhraseQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchPhraseQuery{})).(*query.MatchPhraseQuery)
}
func handleFromPtr_Ptr_query_MatchPhraseQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.MatchPhraseQuery", p))
}

// Converters for pointer handles for type: *query.MatchQuery
func ptrFromHandle_Ptr_query_MatchQuery(h CGoHandle) *query.MatchQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.MatchQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchQuery{})).(*query.MatchQuery)
}
func handleFromPtr_Ptr_query_MatchQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.MatchQuery", p))
}

// Converters for pointer handles for type: *query.PhraseQuery
func ptrFromHandle_Ptr_query_PhraseQuery(h CGoHandle) *query.PhraseQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.PhraseQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.PhraseQuery{})).(*query.PhraseQuery)
}
func handleFromPtr_Ptr_query_PhraseQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.PhraseQuery", p))
}

// Converters for pointer handles for type: *query.PrefixQuery
func ptrFromHandle_Ptr_query_PrefixQuery(h CGoHandle) *query.PrefixQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.PrefixQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.PrefixQuery{})).(*query.PrefixQuery)
}
func handleFromPtr_Ptr_query_PrefixQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.PrefixQuery", p))
}

// Converters for pointer handles for type: *query.QueryStringQuery
func ptrFromHandle_Ptr_query_QueryStringQuery(h CGoHandle) *query.QueryStringQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.QueryStringQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.QueryStringQuery{})).(*query.QueryStringQuery)
}
func handleFromPtr_Ptr_query_QueryStringQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.QueryStringQuery", p))
}

// Converters for pointer handles for type: *query.RegexpQuery
func ptrFromHandle_Ptr_query_RegexpQuery(h CGoHandle) *query.RegexpQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.RegexpQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.RegexpQuery{})).(*query.RegexpQuery)
}
func handleFromPtr_Ptr_query_RegexpQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.RegexpQuery", p))
}

// Converters for pointer handles for type: *query.TermQuery
func ptrFromHandle_Ptr_query_TermQuery(h CGoHandle) *query.TermQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.TermQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.TermQuery{})).(*query.TermQuery)
}
func handleFromPtr_Ptr_query_TermQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.TermQuery", p))
}

// Converters for pointer handles for type: *query.TermRangeQuery
func ptrFromHandle_Ptr_query_TermRangeQuery(h CGoHandle) *query.TermRangeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.TermRangeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.TermRangeQuery{})).(*query.TermRangeQuery)
}
func handleFromPtr_Ptr_query_TermRangeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.TermRangeQuery", p))
}

// Converters for pointer handles for type: *query.WildcardQuery
func ptrFromHandle_Ptr_query_WildcardQuery(h CGoHandle) *query.WildcardQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*query.WildcardQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.WildcardQuery{})).(*query.WildcardQuery)
}
func handleFromPtr_Ptr_query_WildcardQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*query.WildcardQuery", p))
}

// Converters for pointer handles for type: *index.TokenFreq
func ptrFromHandle_Ptr_index_TokenFreq(h CGoHandle) *index.TokenFreq {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*index.TokenFreq")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(index.TokenFreq{})).(*index.TokenFreq)
}
func handleFromPtr_Ptr_index_TokenFreq(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*index.TokenFreq", p))
}

// Converters for pointer handles for type: *index.TokenLocation
func ptrFromHandle_Ptr_index_TokenLocation(h CGoHandle) *index.TokenLocation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*index.TokenLocation")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(index.TokenLocation{})).(*index.TokenLocation)
}
func handleFromPtr_Ptr_index_TokenLocation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*index.TokenLocation", p))
}

// Converters for pointer handles for type: *log.Logger
func ptrFromHandle_Ptr_log_Logger(h CGoHandle) *log.Logger {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*log.Logger")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(log.Logger{})).(*log.Logger)
}
func handleFromPtr_Ptr_log_Logger(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*log.Logger", p))
}

// Converters for pointer handles for type: *time.Location
func ptrFromHandle_Ptr_time_Location(h CGoHandle) *time.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*time.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Location{})).(*time.Location)
}
func handleFromPtr_Ptr_time_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*time.Location", p))
}

// Converters for pointer handles for type: context.Context
func ptrFromHandle_context_Context(h CGoHandle) context.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "context.Context")
	if p == nil {
		return nil
	}
	return p.(context.Context)
}
func handleFromPtr_context_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("context.Context", p))
}

// Converters for pointer handles for type: analysis.Analyzer
func ptrFromHandle_analysis_Analyzer(h CGoHandle) analysis.Analyzer {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.Analyzer")
	if p == nil {
		return nil
	}
	return p.(analysis.Analyzer)
}
func handleFromPtr_analysis_Analyzer(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.Analyzer", p))
}

// Converters for pointer handles for type: analysis.CharFilter
func ptrFromHandle_analysis_CharFilter(h CGoHandle) analysis.CharFilter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.CharFilter")
	if p == nil {
		return nil
	}
	return p.(analysis.CharFilter)
}
func handleFromPtr_analysis_CharFilter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.CharFilter", p))
}

// Converters for pointer handles for type: analysis.DateTimeParser
func ptrFromHandle_analysis_DateTimeParser(h CGoHandle) analysis.DateTimeParser {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.DateTimeParser")
	if p == nil {
		return nil
	}
	return p.(analysis.DateTimeParser)
}
func handleFromPtr_analysis_DateTimeParser(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.DateTimeParser", p))
}

// Converters for non-pointer handles for type: analysis.Token
func ptrFromHandle_analysis_Token(h CGoHandle) *analysis.Token {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.Token")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(analysis.Token{})).(*analysis.Token)
}
func handleFromPtr_analysis_Token(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.Token", p))
}

// Converters for pointer handles for type: analysis.TokenFilter
func ptrFromHandle_analysis_TokenFilter(h CGoHandle) analysis.TokenFilter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.TokenFilter")
	if p == nil {
		return nil
	}
	return p.(analysis.TokenFilter)
}
func handleFromPtr_analysis_TokenFilter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.TokenFilter", p))
}

// Converters for implicit pointer handles for type: analysis.TokenMap
func ptrFromHandle_analysis_TokenMap(h CGoHandle) *analysis.TokenMap {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.TokenMap")
	if p == nil {
		return nil
	}
	return p.(*analysis.TokenMap)
}
func deptrFromHandle_analysis_TokenMap(h CGoHandle) analysis.TokenMap {
	p := ptrFromHandle_analysis_TokenMap(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_analysis_TokenMap(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.TokenMap", p))
}

// --- wrapping map: analysis.TokenMap ---
//
//export analysis_TokenMap_CTor
func analysis_TokenMap_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_analysis_TokenMap(&analysis.TokenMap{}))
}

//export analysis_TokenMap_len
func analysis_TokenMap_len(handle CGoHandle) int {
	return len(deptrFromHandle_analysis_TokenMap(handle))
}

//export analysis_TokenMap_elem
func analysis_TokenMap_elem(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_analysis_TokenMap(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return boolGoToPy(v)
}

//export analysis_TokenMap_contains
func analysis_TokenMap_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_analysis_TokenMap(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export analysis_TokenMap_set
func analysis_TokenMap_set(handle CGoHandle, _ky *C.char, _vl C.char) {
	s := deptrFromHandle_analysis_TokenMap(handle)
	s[C.GoString(_ky)] = boolPyToGo(_vl)
}

//export analysis_TokenMap_delete
func analysis_TokenMap_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_analysis_TokenMap(handle)
	delete(s, C.GoString(_ky))
}

//export analysis_TokenMap_keys
func analysis_TokenMap_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_analysis_TokenMap(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: analysis.TokenStream
func ptrFromHandle_analysis_TokenStream(h CGoHandle) *analysis.TokenStream {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.TokenStream")
	if p == nil {
		return nil
	}
	return p.(*analysis.TokenStream)
}
func deptrFromHandle_analysis_TokenStream(h CGoHandle) analysis.TokenStream {
	p := ptrFromHandle_analysis_TokenStream(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_analysis_TokenStream(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.TokenStream", p))
}

// --- wrapping slice: analysis.TokenStream ---
//
//export analysis_TokenStream_CTor
func analysis_TokenStream_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_analysis_TokenStream(&analysis.TokenStream{}))
}

//export analysis_TokenStream_len
func analysis_TokenStream_len(handle CGoHandle) int {
	return len(deptrFromHandle_analysis_TokenStream(handle))
}

//export analysis_TokenStream_elem
func analysis_TokenStream_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_analysis_TokenStream(handle)
	return handleFromPtr_Ptr_analysis_Token(s[_idx])
}

//export analysis_TokenStream_subslice
func analysis_TokenStream_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_analysis_TokenStream(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_analysis_TokenStream(&ss))
}

//export analysis_TokenStream_set
func analysis_TokenStream_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_analysis_TokenStream(handle)
	s[_idx] = ptrFromHandle_Ptr_analysis_Token(_vl)
}

//export analysis_TokenStream_append
func analysis_TokenStream_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_analysis_TokenStream(handle)
	*s = append(*s, ptrFromHandle_Ptr_analysis_Token(_vl))
}

// Converters for pointer handles for type: analysis.Tokenizer
func ptrFromHandle_analysis_Tokenizer(h CGoHandle) analysis.Tokenizer {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "analysis.Tokenizer")
	if p == nil {
		return nil
	}
	return p.(analysis.Tokenizer)
}
func handleFromPtr_analysis_Tokenizer(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("analysis.Tokenizer", p))
}

// Converters for non-pointer handles for type: document.CompositeField
func ptrFromHandle_document_CompositeField(h CGoHandle) *document.CompositeField {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "document.CompositeField")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(document.CompositeField{})).(*document.CompositeField)
}
func handleFromPtr_document_CompositeField(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("document.CompositeField", p))
}

// Converters for non-pointer handles for type: document.Document
func ptrFromHandle_document_Document(h CGoHandle) *document.Document {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "document.Document")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(document.Document{})).(*document.Document)
}
func handleFromPtr_document_Document(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("document.Document", p))
}

// Converters for pointer handles for type: document.Field
func ptrFromHandle_document_Field(h CGoHandle) document.Field {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "document.Field")
	if p == nil {
		return nil
	}
	return p.(document.Field)
}
func handleFromPtr_document_Field(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("document.Field", p))
}

// Converters for non-pointer handles for type: mapping.DocumentMapping
func ptrFromHandle_mapping_DocumentMapping(h CGoHandle) *mapping.DocumentMapping {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "mapping.DocumentMapping")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(mapping.DocumentMapping{})).(*mapping.DocumentMapping)
}
func handleFromPtr_mapping_DocumentMapping(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("mapping.DocumentMapping", p))
}

// Converters for non-pointer handles for type: mapping.FieldMapping
func ptrFromHandle_mapping_FieldMapping(h CGoHandle) *mapping.FieldMapping {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "mapping.FieldMapping")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(mapping.FieldMapping{})).(*mapping.FieldMapping)
}
func handleFromPtr_mapping_FieldMapping(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("mapping.FieldMapping", p))
}

// Converters for pointer handles for type: mapping.IndexMapping
func ptrFromHandle_mapping_IndexMapping(h CGoHandle) mapping.IndexMapping {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "mapping.IndexMapping")
	if p == nil {
		return nil
	}
	return p.(mapping.IndexMapping)
}
func handleFromPtr_mapping_IndexMapping(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("mapping.IndexMapping", p))
}

// Converters for non-pointer handles for type: mapping.IndexMappingImpl
func ptrFromHandle_mapping_IndexMappingImpl(h CGoHandle) *mapping.IndexMappingImpl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "mapping.IndexMappingImpl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(mapping.IndexMappingImpl{})).(*mapping.IndexMappingImpl)
}
func handleFromPtr_mapping_IndexMappingImpl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("mapping.IndexMappingImpl", p))
}

// Converters for non-pointer handles for type: registry.AnalyzerCache
func ptrFromHandle_registry_AnalyzerCache(h CGoHandle) *registry.AnalyzerCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.AnalyzerCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.AnalyzerCache{})).(*registry.AnalyzerCache)
}
func handleFromPtr_registry_AnalyzerCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.AnalyzerCache", p))
}

// Converters for non-pointer handles for type: registry.Cache
func ptrFromHandle_registry_Cache(h CGoHandle) *registry.Cache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.Cache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.Cache{})).(*registry.Cache)
}
func handleFromPtr_registry_Cache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.Cache", p))
}

// Converters for non-pointer handles for type: registry.CharFilterCache
func ptrFromHandle_registry_CharFilterCache(h CGoHandle) *registry.CharFilterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.CharFilterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.CharFilterCache{})).(*registry.CharFilterCache)
}
func handleFromPtr_registry_CharFilterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.CharFilterCache", p))
}

// Converters for non-pointer handles for type: registry.DateTimeParserCache
func ptrFromHandle_registry_DateTimeParserCache(h CGoHandle) *registry.DateTimeParserCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.DateTimeParserCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.DateTimeParserCache{})).(*registry.DateTimeParserCache)
}
func handleFromPtr_registry_DateTimeParserCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.DateTimeParserCache", p))
}

// Converters for non-pointer handles for type: registry.FragmentFormatterCache
func ptrFromHandle_registry_FragmentFormatterCache(h CGoHandle) *registry.FragmentFormatterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.FragmentFormatterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.FragmentFormatterCache{})).(*registry.FragmentFormatterCache)
}
func handleFromPtr_registry_FragmentFormatterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.FragmentFormatterCache", p))
}

// Converters for non-pointer handles for type: registry.FragmenterCache
func ptrFromHandle_registry_FragmenterCache(h CGoHandle) *registry.FragmenterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.FragmenterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.FragmenterCache{})).(*registry.FragmenterCache)
}
func handleFromPtr_registry_FragmenterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.FragmenterCache", p))
}

// Converters for non-pointer handles for type: registry.HighlighterCache
func ptrFromHandle_registry_HighlighterCache(h CGoHandle) *registry.HighlighterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.HighlighterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.HighlighterCache{})).(*registry.HighlighterCache)
}
func handleFromPtr_registry_HighlighterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.HighlighterCache", p))
}

// Converters for non-pointer handles for type: registry.TokenFilterCache
func ptrFromHandle_registry_TokenFilterCache(h CGoHandle) *registry.TokenFilterCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.TokenFilterCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.TokenFilterCache{})).(*registry.TokenFilterCache)
}
func handleFromPtr_registry_TokenFilterCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.TokenFilterCache", p))
}

// Converters for non-pointer handles for type: registry.TokenMapCache
func ptrFromHandle_registry_TokenMapCache(h CGoHandle) *registry.TokenMapCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.TokenMapCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.TokenMapCache{})).(*registry.TokenMapCache)
}
func handleFromPtr_registry_TokenMapCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.TokenMapCache", p))
}

// Converters for non-pointer handles for type: registry.TokenizerCache
func ptrFromHandle_registry_TokenizerCache(h CGoHandle) *registry.TokenizerCache {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "registry.TokenizerCache")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(registry.TokenizerCache{})).(*registry.TokenizerCache)
}
func handleFromPtr_registry_TokenizerCache(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("registry.TokenizerCache", p))
}

// Converters for implicit pointer handles for type: search.ArrayPositions
func ptrFromHandle_search_ArrayPositions(h CGoHandle) *search.ArrayPositions {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.ArrayPositions")
	if p == nil {
		return nil
	}
	return p.(*search.ArrayPositions)
}
func deptrFromHandle_search_ArrayPositions(h CGoHandle) search.ArrayPositions {
	p := ptrFromHandle_search_ArrayPositions(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_ArrayPositions(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.ArrayPositions", p))
}

// --- wrapping slice: search.ArrayPositions ---
//
//export search_ArrayPositions_CTor
func search_ArrayPositions_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_ArrayPositions(&search.ArrayPositions{}))
}

//export search_ArrayPositions_len
func search_ArrayPositions_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_ArrayPositions(handle))
}

//export search_ArrayPositions_elem
func search_ArrayPositions_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_search_ArrayPositions(handle)
	return C.ulonglong(s[_idx])
}

//export search_ArrayPositions_subslice
func search_ArrayPositions_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_search_ArrayPositions(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_search_ArrayPositions(&ss))
}

//export search_ArrayPositions_set
func search_ArrayPositions_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_search_ArrayPositions(handle)
	s[_idx] = uint64(_vl)
}

//export search_ArrayPositions_append
func search_ArrayPositions_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_search_ArrayPositions(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for non-pointer handles for type: search.DateRangeFacet
func ptrFromHandle_search_DateRangeFacet(h CGoHandle) *search.DateRangeFacet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.DateRangeFacet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.DateRangeFacet{})).(*search.DateRangeFacet)
}
func handleFromPtr_search_DateRangeFacet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.DateRangeFacet", p))
}

// Converters for implicit pointer handles for type: search.DateRangeFacets
func ptrFromHandle_search_DateRangeFacets(h CGoHandle) *search.DateRangeFacets {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.DateRangeFacets")
	if p == nil {
		return nil
	}
	return p.(*search.DateRangeFacets)
}
func deptrFromHandle_search_DateRangeFacets(h CGoHandle) search.DateRangeFacets {
	p := ptrFromHandle_search_DateRangeFacets(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_DateRangeFacets(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.DateRangeFacets", p))
}

// --- wrapping slice: search.DateRangeFacets ---
//
//export search_DateRangeFacets_CTor
func search_DateRangeFacets_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_DateRangeFacets(&search.DateRangeFacets{}))
}

//export search_DateRangeFacets_len
func search_DateRangeFacets_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_DateRangeFacets(handle))
}

//export search_DateRangeFacets_elem
func search_DateRangeFacets_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_search_DateRangeFacets(handle)
	return handleFromPtr_Ptr_search_DateRangeFacet(s[_idx])
}

//export search_DateRangeFacets_subslice
func search_DateRangeFacets_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_search_DateRangeFacets(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_search_DateRangeFacets(&ss))
}

//export search_DateRangeFacets_set
func search_DateRangeFacets_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_search_DateRangeFacets(handle)
	s[_idx] = ptrFromHandle_Ptr_search_DateRangeFacet(_vl)
}

//export search_DateRangeFacets_append
func search_DateRangeFacets_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_search_DateRangeFacets(handle)
	*s = append(*s, ptrFromHandle_Ptr_search_DateRangeFacet(_vl))
}

// Converters for non-pointer handles for type: search.DocumentMatch
func ptrFromHandle_search_DocumentMatch(h CGoHandle) *search.DocumentMatch {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.DocumentMatch")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.DocumentMatch{})).(*search.DocumentMatch)
}
func handleFromPtr_search_DocumentMatch(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.DocumentMatch", p))
}

// Converters for implicit pointer handles for type: search.DocumentMatchCollection
func ptrFromHandle_search_DocumentMatchCollection(h CGoHandle) *search.DocumentMatchCollection {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.DocumentMatchCollection")
	if p == nil {
		return nil
	}
	return p.(*search.DocumentMatchCollection)
}
func deptrFromHandle_search_DocumentMatchCollection(h CGoHandle) search.DocumentMatchCollection {
	p := ptrFromHandle_search_DocumentMatchCollection(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_DocumentMatchCollection(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.DocumentMatchCollection", p))
}

// --- wrapping slice: search.DocumentMatchCollection ---
//
//export search_DocumentMatchCollection_CTor
func search_DocumentMatchCollection_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_DocumentMatchCollection(&search.DocumentMatchCollection{}))
}

//export search_DocumentMatchCollection_len
func search_DocumentMatchCollection_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_DocumentMatchCollection(handle))
}

//export search_DocumentMatchCollection_elem
func search_DocumentMatchCollection_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_search_DocumentMatchCollection(handle)
	return handleFromPtr_Ptr_search_DocumentMatch(s[_idx])
}

//export search_DocumentMatchCollection_subslice
func search_DocumentMatchCollection_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_search_DocumentMatchCollection(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_search_DocumentMatchCollection(&ss))
}

//export search_DocumentMatchCollection_set
func search_DocumentMatchCollection_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_search_DocumentMatchCollection(handle)
	s[_idx] = ptrFromHandle_Ptr_search_DocumentMatch(_vl)
}

//export search_DocumentMatchCollection_append
func search_DocumentMatchCollection_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_search_DocumentMatchCollection(handle)
	*s = append(*s, ptrFromHandle_Ptr_search_DocumentMatch(_vl))
}

// Converters for non-pointer handles for type: search.Explanation
func ptrFromHandle_search_Explanation(h CGoHandle) *search.Explanation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.Explanation")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.Explanation{})).(*search.Explanation)
}
func handleFromPtr_search_Explanation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.Explanation", p))
}

// Converters for non-pointer handles for type: search.FacetResult
func ptrFromHandle_search_FacetResult(h CGoHandle) *search.FacetResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.FacetResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.FacetResult{})).(*search.FacetResult)
}
func handleFromPtr_search_FacetResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.FacetResult", p))
}

// Converters for implicit pointer handles for type: search.FacetResults
func ptrFromHandle_search_FacetResults(h CGoHandle) *search.FacetResults {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.FacetResults")
	if p == nil {
		return nil
	}
	return p.(*search.FacetResults)
}
func deptrFromHandle_search_FacetResults(h CGoHandle) search.FacetResults {
	p := ptrFromHandle_search_FacetResults(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_FacetResults(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.FacetResults", p))
}

// --- wrapping map: search.FacetResults ---
//
//export search_FacetResults_CTor
func search_FacetResults_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_FacetResults(&search.FacetResults{}))
}

//export search_FacetResults_len
func search_FacetResults_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_FacetResults(handle))
}

//export search_FacetResults_elem
func search_FacetResults_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_search_FacetResults(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Ptr_search_FacetResult(v)
}

//export search_FacetResults_contains
func search_FacetResults_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_search_FacetResults(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export search_FacetResults_set
func search_FacetResults_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_search_FacetResults(handle)
	s[C.GoString(_ky)] = ptrFromHandle_Ptr_search_FacetResult(_vl)
}

//export search_FacetResults_delete
func search_FacetResults_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_search_FacetResults(handle)
	delete(s, C.GoString(_ky))
}

//export search_FacetResults_keys
func search_FacetResults_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_search_FacetResults(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: search.FieldFragmentMap
func ptrFromHandle_search_FieldFragmentMap(h CGoHandle) *search.FieldFragmentMap {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.FieldFragmentMap")
	if p == nil {
		return nil
	}
	return p.(*search.FieldFragmentMap)
}
func deptrFromHandle_search_FieldFragmentMap(h CGoHandle) search.FieldFragmentMap {
	p := ptrFromHandle_search_FieldFragmentMap(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_FieldFragmentMap(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.FieldFragmentMap", p))
}

// --- wrapping map: search.FieldFragmentMap ---
//
//export search_FieldFragmentMap_CTor
func search_FieldFragmentMap_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_FieldFragmentMap(&search.FieldFragmentMap{}))
}

//export search_FieldFragmentMap_len
func search_FieldFragmentMap_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_FieldFragmentMap(handle))
}

//export search_FieldFragmentMap_elem
func search_FieldFragmentMap_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_search_FieldFragmentMap(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Slice_string(v)
}

//export search_FieldFragmentMap_contains
func search_FieldFragmentMap_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_search_FieldFragmentMap(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export search_FieldFragmentMap_set
func search_FieldFragmentMap_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_search_FieldFragmentMap(handle)
	s[C.GoString(_ky)] = deptrFromHandle_Slice_string(_vl)
}

//export search_FieldFragmentMap_delete
func search_FieldFragmentMap_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_search_FieldFragmentMap(handle)
	delete(s, C.GoString(_ky))
}

//export search_FieldFragmentMap_keys
func search_FieldFragmentMap_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_search_FieldFragmentMap(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for non-pointer handles for type: search.FieldTermLocation
func ptrFromHandle_search_FieldTermLocation(h CGoHandle) *search.FieldTermLocation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.FieldTermLocation")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.FieldTermLocation{})).(*search.FieldTermLocation)
}
func handleFromPtr_search_FieldTermLocation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.FieldTermLocation", p))
}

// Converters for implicit pointer handles for type: search.FieldTermLocationMap
func ptrFromHandle_search_FieldTermLocationMap(h CGoHandle) *search.FieldTermLocationMap {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.FieldTermLocationMap")
	if p == nil {
		return nil
	}
	return p.(*search.FieldTermLocationMap)
}
func deptrFromHandle_search_FieldTermLocationMap(h CGoHandle) search.FieldTermLocationMap {
	p := ptrFromHandle_search_FieldTermLocationMap(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_FieldTermLocationMap(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.FieldTermLocationMap", p))
}

// --- wrapping map: search.FieldTermLocationMap ---
//
//export search_FieldTermLocationMap_CTor
func search_FieldTermLocationMap_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_FieldTermLocationMap(&search.FieldTermLocationMap{}))
}

//export search_FieldTermLocationMap_len
func search_FieldTermLocationMap_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_FieldTermLocationMap(handle))
}

//export search_FieldTermLocationMap_elem
func search_FieldTermLocationMap_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_search_FieldTermLocationMap(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_search_TermLocationMap(v)
}

//export search_FieldTermLocationMap_contains
func search_FieldTermLocationMap_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_search_FieldTermLocationMap(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export search_FieldTermLocationMap_set
func search_FieldTermLocationMap_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_search_FieldTermLocationMap(handle)
	s[C.GoString(_ky)] = deptrFromHandle_search_TermLocationMap(_vl)
}

//export search_FieldTermLocationMap_delete
func search_FieldTermLocationMap_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_search_FieldTermLocationMap(handle)
	delete(s, C.GoString(_ky))
}

//export search_FieldTermLocationMap_keys
func search_FieldTermLocationMap_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_search_FieldTermLocationMap(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for non-pointer handles for type: search.Location
func ptrFromHandle_search_Location(h CGoHandle) *search.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.Location{})).(*search.Location)
}
func handleFromPtr_search_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.Location", p))
}

// Converters for implicit pointer handles for type: search.Locations
func ptrFromHandle_search_Locations(h CGoHandle) *search.Locations {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.Locations")
	if p == nil {
		return nil
	}
	return p.(*search.Locations)
}
func deptrFromHandle_search_Locations(h CGoHandle) search.Locations {
	p := ptrFromHandle_search_Locations(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_Locations(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.Locations", p))
}

// --- wrapping slice: search.Locations ---
//
//export search_Locations_CTor
func search_Locations_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_Locations(&search.Locations{}))
}

//export search_Locations_len
func search_Locations_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_Locations(handle))
}

//export search_Locations_elem
func search_Locations_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_search_Locations(handle)
	return handleFromPtr_Ptr_search_Location(s[_idx])
}

//export search_Locations_subslice
func search_Locations_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_search_Locations(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_search_Locations(&ss))
}

//export search_Locations_set
func search_Locations_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_search_Locations(handle)
	s[_idx] = ptrFromHandle_Ptr_search_Location(_vl)
}

//export search_Locations_append
func search_Locations_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_search_Locations(handle)
	*s = append(*s, ptrFromHandle_Ptr_search_Location(_vl))
}

// Converters for non-pointer handles for type: search.NumericRangeFacet
func ptrFromHandle_search_NumericRangeFacet(h CGoHandle) *search.NumericRangeFacet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.NumericRangeFacet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.NumericRangeFacet{})).(*search.NumericRangeFacet)
}
func handleFromPtr_search_NumericRangeFacet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.NumericRangeFacet", p))
}

// Converters for implicit pointer handles for type: search.NumericRangeFacets
func ptrFromHandle_search_NumericRangeFacets(h CGoHandle) *search.NumericRangeFacets {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.NumericRangeFacets")
	if p == nil {
		return nil
	}
	return p.(*search.NumericRangeFacets)
}
func deptrFromHandle_search_NumericRangeFacets(h CGoHandle) search.NumericRangeFacets {
	p := ptrFromHandle_search_NumericRangeFacets(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_NumericRangeFacets(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.NumericRangeFacets", p))
}

// --- wrapping slice: search.NumericRangeFacets ---
//
//export search_NumericRangeFacets_CTor
func search_NumericRangeFacets_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_NumericRangeFacets(&search.NumericRangeFacets{}))
}

//export search_NumericRangeFacets_len
func search_NumericRangeFacets_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_NumericRangeFacets(handle))
}

//export search_NumericRangeFacets_elem
func search_NumericRangeFacets_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_search_NumericRangeFacets(handle)
	return handleFromPtr_Ptr_search_NumericRangeFacet(s[_idx])
}

//export search_NumericRangeFacets_subslice
func search_NumericRangeFacets_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_search_NumericRangeFacets(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_search_NumericRangeFacets(&ss))
}

//export search_NumericRangeFacets_set
func search_NumericRangeFacets_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_search_NumericRangeFacets(handle)
	s[_idx] = ptrFromHandle_Ptr_search_NumericRangeFacet(_vl)
}

//export search_NumericRangeFacets_append
func search_NumericRangeFacets_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_search_NumericRangeFacets(handle)
	*s = append(*s, ptrFromHandle_Ptr_search_NumericRangeFacet(_vl))
}

// Converters for pointer handles for type: search.SearchSort
func ptrFromHandle_search_SearchSort(h CGoHandle) search.SearchSort {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.SearchSort")
	if p == nil {
		return nil
	}
	return p.(search.SearchSort)
}
func handleFromPtr_search_SearchSort(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.SearchSort", p))
}

// Converters for pointer handles for type: search.Searcher
func ptrFromHandle_search_Searcher(h CGoHandle) search.Searcher {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.Searcher")
	if p == nil {
		return nil
	}
	return p.(search.Searcher)
}
func handleFromPtr_search_Searcher(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.Searcher", p))
}

// Converters for non-pointer handles for type: search.SearcherOptions
func ptrFromHandle_search_SearcherOptions(h CGoHandle) *search.SearcherOptions {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.SearcherOptions")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.SearcherOptions{})).(*search.SearcherOptions)
}
func handleFromPtr_search_SearcherOptions(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.SearcherOptions", p))
}

// Converters for implicit pointer handles for type: search.SortOrder
func ptrFromHandle_search_SortOrder(h CGoHandle) *search.SortOrder {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.SortOrder")
	if p == nil {
		return nil
	}
	return p.(*search.SortOrder)
}
func deptrFromHandle_search_SortOrder(h CGoHandle) search.SortOrder {
	p := ptrFromHandle_search_SortOrder(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_SortOrder(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.SortOrder", p))
}

// --- wrapping slice: search.SortOrder ---
//
//export search_SortOrder_CTor
func search_SortOrder_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_SortOrder(&search.SortOrder{}))
}

//export search_SortOrder_len
func search_SortOrder_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_SortOrder(handle))
}

//export search_SortOrder_elem
func search_SortOrder_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_search_SortOrder(handle)
	return handleFromPtr_search_SearchSort(s[_idx])
}

//export search_SortOrder_subslice
func search_SortOrder_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_search_SortOrder(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_search_SortOrder(&ss))
}

//export search_SortOrder_set
func search_SortOrder_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_search_SortOrder(handle)
	s[_idx] = ptrFromHandle_search_SearchSort(_vl)
}

//export search_SortOrder_append
func search_SortOrder_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_search_SortOrder(handle)
	*s = append(*s, ptrFromHandle_search_SearchSort(_vl))
}

// Converters for non-pointer handles for type: search.TermFacet
func ptrFromHandle_search_TermFacet(h CGoHandle) *search.TermFacet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.TermFacet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.TermFacet{})).(*search.TermFacet)
}
func handleFromPtr_search_TermFacet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.TermFacet", p))
}

// Converters for non-pointer handles for type: search.TermFacets
func ptrFromHandle_search_TermFacets(h CGoHandle) *search.TermFacets {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.TermFacets")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(search.TermFacets{})).(*search.TermFacets)
}
func handleFromPtr_search_TermFacets(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.TermFacets", p))
}

// Converters for implicit pointer handles for type: search.TermLocationMap
func ptrFromHandle_search_TermLocationMap(h CGoHandle) *search.TermLocationMap {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "search.TermLocationMap")
	if p == nil {
		return nil
	}
	return p.(*search.TermLocationMap)
}
func deptrFromHandle_search_TermLocationMap(h CGoHandle) search.TermLocationMap {
	p := ptrFromHandle_search_TermLocationMap(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_search_TermLocationMap(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("search.TermLocationMap", p))
}

// --- wrapping map: search.TermLocationMap ---
//
//export search_TermLocationMap_CTor
func search_TermLocationMap_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_search_TermLocationMap(&search.TermLocationMap{}))
}

//export search_TermLocationMap_len
func search_TermLocationMap_len(handle CGoHandle) int {
	return len(deptrFromHandle_search_TermLocationMap(handle))
}

//export search_TermLocationMap_elem
func search_TermLocationMap_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_search_TermLocationMap(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_search_Locations(v)
}

//export search_TermLocationMap_contains
func search_TermLocationMap_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_search_TermLocationMap(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export search_TermLocationMap_set
func search_TermLocationMap_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_search_TermLocationMap(handle)
	s[C.GoString(_ky)] = deptrFromHandle_search_Locations(_vl)
}

//export search_TermLocationMap_delete
func search_TermLocationMap_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_search_TermLocationMap(handle)
	delete(s, C.GoString(_ky))
}

//export search_TermLocationMap_keys
func search_TermLocationMap_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_search_TermLocationMap(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for pointer handles for type: highlight.FragmentFormatter
func ptrFromHandle_highlight_FragmentFormatter(h CGoHandle) highlight.FragmentFormatter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "highlight.FragmentFormatter")
	if p == nil {
		return nil
	}
	return p.(highlight.FragmentFormatter)
}
func handleFromPtr_highlight_FragmentFormatter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("highlight.FragmentFormatter", p))
}

// Converters for pointer handles for type: highlight.Fragmenter
func ptrFromHandle_highlight_Fragmenter(h CGoHandle) highlight.Fragmenter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "highlight.Fragmenter")
	if p == nil {
		return nil
	}
	return p.(highlight.Fragmenter)
}
func handleFromPtr_highlight_Fragmenter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("highlight.Fragmenter", p))
}

// Converters for pointer handles for type: highlight.Highlighter
func ptrFromHandle_highlight_Highlighter(h CGoHandle) highlight.Highlighter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "highlight.Highlighter")
	if p == nil {
		return nil
	}
	return p.(highlight.Highlighter)
}
func handleFromPtr_highlight_Highlighter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("highlight.Highlighter", p))
}

// Converters for non-pointer handles for type: query.BleveQueryTime
func ptrFromHandle_query_BleveQueryTime(h CGoHandle) *query.BleveQueryTime {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.BleveQueryTime")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.BleveQueryTime{})).(*query.BleveQueryTime)
}
func handleFromPtr_query_BleveQueryTime(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.BleveQueryTime", p))
}

// Converters for non-pointer handles for type: query.BoolFieldQuery
func ptrFromHandle_query_BoolFieldQuery(h CGoHandle) *query.BoolFieldQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.BoolFieldQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.BoolFieldQuery{})).(*query.BoolFieldQuery)
}
func handleFromPtr_query_BoolFieldQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.BoolFieldQuery", p))
}

// Converters for non-pointer handles for type: query.BooleanQuery
func ptrFromHandle_query_BooleanQuery(h CGoHandle) *query.BooleanQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.BooleanQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.BooleanQuery{})).(*query.BooleanQuery)
}
func handleFromPtr_query_BooleanQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.BooleanQuery", p))
}

// Converters for non-pointer handles for type: query.ConjunctionQuery
func ptrFromHandle_query_ConjunctionQuery(h CGoHandle) *query.ConjunctionQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.ConjunctionQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.ConjunctionQuery{})).(*query.ConjunctionQuery)
}
func handleFromPtr_query_ConjunctionQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.ConjunctionQuery", p))
}

// Converters for non-pointer handles for type: query.DateRangeQuery
func ptrFromHandle_query_DateRangeQuery(h CGoHandle) *query.DateRangeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.DateRangeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.DateRangeQuery{})).(*query.DateRangeQuery)
}
func handleFromPtr_query_DateRangeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.DateRangeQuery", p))
}

// Converters for non-pointer handles for type: query.DisjunctionQuery
func ptrFromHandle_query_DisjunctionQuery(h CGoHandle) *query.DisjunctionQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.DisjunctionQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.DisjunctionQuery{})).(*query.DisjunctionQuery)
}
func handleFromPtr_query_DisjunctionQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.DisjunctionQuery", p))
}

// Converters for non-pointer handles for type: query.DocIDQuery
func ptrFromHandle_query_DocIDQuery(h CGoHandle) *query.DocIDQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.DocIDQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.DocIDQuery{})).(*query.DocIDQuery)
}
func handleFromPtr_query_DocIDQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.DocIDQuery", p))
}

// Converters for non-pointer handles for type: query.FuzzyQuery
func ptrFromHandle_query_FuzzyQuery(h CGoHandle) *query.FuzzyQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.FuzzyQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.FuzzyQuery{})).(*query.FuzzyQuery)
}
func handleFromPtr_query_FuzzyQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.FuzzyQuery", p))
}

// Converters for non-pointer handles for type: query.GeoBoundingBoxQuery
func ptrFromHandle_query_GeoBoundingBoxQuery(h CGoHandle) *query.GeoBoundingBoxQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.GeoBoundingBoxQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.GeoBoundingBoxQuery{})).(*query.GeoBoundingBoxQuery)
}
func handleFromPtr_query_GeoBoundingBoxQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.GeoBoundingBoxQuery", p))
}

// Converters for non-pointer handles for type: query.GeoDistanceQuery
func ptrFromHandle_query_GeoDistanceQuery(h CGoHandle) *query.GeoDistanceQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.GeoDistanceQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.GeoDistanceQuery{})).(*query.GeoDistanceQuery)
}
func handleFromPtr_query_GeoDistanceQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.GeoDistanceQuery", p))
}

// Converters for non-pointer handles for type: query.GeoShapeQuery
func ptrFromHandle_query_GeoShapeQuery(h CGoHandle) *query.GeoShapeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.GeoShapeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.GeoShapeQuery{})).(*query.GeoShapeQuery)
}
func handleFromPtr_query_GeoShapeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.GeoShapeQuery", p))
}

// Converters for non-pointer handles for type: query.Geometry
func ptrFromHandle_query_Geometry(h CGoHandle) *query.Geometry {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.Geometry")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.Geometry{})).(*query.Geometry)
}
func handleFromPtr_query_Geometry(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.Geometry", p))
}

// Converters for non-pointer handles for type: query.IPRangeQuery
func ptrFromHandle_query_IPRangeQuery(h CGoHandle) *query.IPRangeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.IPRangeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.IPRangeQuery{})).(*query.IPRangeQuery)
}
func handleFromPtr_query_IPRangeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.IPRangeQuery", p))
}

// Converters for non-pointer handles for type: query.MatchAllQuery
func ptrFromHandle_query_MatchAllQuery(h CGoHandle) *query.MatchAllQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.MatchAllQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchAllQuery{})).(*query.MatchAllQuery)
}
func handleFromPtr_query_MatchAllQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.MatchAllQuery", p))
}

// Converters for non-pointer handles for type: query.MatchNoneQuery
func ptrFromHandle_query_MatchNoneQuery(h CGoHandle) *query.MatchNoneQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.MatchNoneQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchNoneQuery{})).(*query.MatchNoneQuery)
}
func handleFromPtr_query_MatchNoneQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.MatchNoneQuery", p))
}

// Converters for non-pointer handles for type: query.MatchPhraseQuery
func ptrFromHandle_query_MatchPhraseQuery(h CGoHandle) *query.MatchPhraseQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.MatchPhraseQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchPhraseQuery{})).(*query.MatchPhraseQuery)
}
func handleFromPtr_query_MatchPhraseQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.MatchPhraseQuery", p))
}

// Converters for non-pointer handles for type: query.MatchQuery
func ptrFromHandle_query_MatchQuery(h CGoHandle) *query.MatchQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.MatchQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.MatchQuery{})).(*query.MatchQuery)
}
func handleFromPtr_query_MatchQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.MatchQuery", p))
}

// Converters for non-pointer handles for type: query.PhraseQuery
func ptrFromHandle_query_PhraseQuery(h CGoHandle) *query.PhraseQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.PhraseQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.PhraseQuery{})).(*query.PhraseQuery)
}
func handleFromPtr_query_PhraseQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.PhraseQuery", p))
}

// Converters for non-pointer handles for type: query.PrefixQuery
func ptrFromHandle_query_PrefixQuery(h CGoHandle) *query.PrefixQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.PrefixQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.PrefixQuery{})).(*query.PrefixQuery)
}
func handleFromPtr_query_PrefixQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.PrefixQuery", p))
}

// Converters for pointer handles for type: query.Query
func ptrFromHandle_query_Query(h CGoHandle) query.Query {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.Query")
	if p == nil {
		return nil
	}
	return p.(query.Query)
}
func handleFromPtr_query_Query(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.Query", p))
}

// Converters for non-pointer handles for type: query.QueryStringQuery
func ptrFromHandle_query_QueryStringQuery(h CGoHandle) *query.QueryStringQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.QueryStringQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.QueryStringQuery{})).(*query.QueryStringQuery)
}
func handleFromPtr_query_QueryStringQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.QueryStringQuery", p))
}

// Converters for non-pointer handles for type: query.RegexpQuery
func ptrFromHandle_query_RegexpQuery(h CGoHandle) *query.RegexpQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.RegexpQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.RegexpQuery{})).(*query.RegexpQuery)
}
func handleFromPtr_query_RegexpQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.RegexpQuery", p))
}

// Converters for non-pointer handles for type: query.TermQuery
func ptrFromHandle_query_TermQuery(h CGoHandle) *query.TermQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.TermQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.TermQuery{})).(*query.TermQuery)
}
func handleFromPtr_query_TermQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.TermQuery", p))
}

// Converters for non-pointer handles for type: query.TermRangeQuery
func ptrFromHandle_query_TermRangeQuery(h CGoHandle) *query.TermRangeQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.TermRangeQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.TermRangeQuery{})).(*query.TermRangeQuery)
}
func handleFromPtr_query_TermRangeQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.TermRangeQuery", p))
}

// Converters for non-pointer handles for type: query.WildcardQuery
func ptrFromHandle_query_WildcardQuery(h CGoHandle) *query.WildcardQuery {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "query.WildcardQuery")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(query.WildcardQuery{})).(*query.WildcardQuery)
}
func handleFromPtr_query_WildcardQuery(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("query.WildcardQuery", p))
}

// Converters for pointer handles for type: index.CompositeField
func ptrFromHandle_index_CompositeField(h CGoHandle) index.CompositeField {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.CompositeField")
	if p == nil {
		return nil
	}
	return p.(index.CompositeField)
}
func handleFromPtr_index_CompositeField(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.CompositeField", p))
}

// Converters for pointer handles for type: index.Directory
func ptrFromHandle_index_Directory(h CGoHandle) index.Directory {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.Directory")
	if p == nil {
		return nil
	}
	return p.(index.Directory)
}
func handleFromPtr_index_Directory(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.Directory", p))
}

// Converters for pointer handles for type: index.Document
func ptrFromHandle_index_Document(h CGoHandle) index.Document {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.Document")
	if p == nil {
		return nil
	}
	return p.(index.Document)
}
func handleFromPtr_index_Document(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.Document", p))
}

// Converters for pointer handles for type: index.Field
func ptrFromHandle_index_Field(h CGoHandle) index.Field {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.Field")
	if p == nil {
		return nil
	}
	return p.(index.Field)
}
func handleFromPtr_index_Field(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.Field", p))
}

// Converters for pointer handles for type: index.FieldDict
func ptrFromHandle_index_FieldDict(h CGoHandle) index.FieldDict {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.FieldDict")
	if p == nil {
		return nil
	}
	return p.(index.FieldDict)
}
func handleFromPtr_index_FieldDict(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.FieldDict", p))
}

// Converters for pointer handles for type: index.GeoJSON
func ptrFromHandle_index_GeoJSON(h CGoHandle) index.GeoJSON {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.GeoJSON")
	if p == nil {
		return nil
	}
	return p.(index.GeoJSON)
}
func handleFromPtr_index_GeoJSON(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.GeoJSON", p))
}

// Converters for pointer handles for type: index.Index
func ptrFromHandle_index_Index(h CGoHandle) index.Index {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.Index")
	if p == nil {
		return nil
	}
	return p.(index.Index)
}
func handleFromPtr_index_Index(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.Index", p))
}

// Converters for implicit pointer handles for type: index.IndexInternalID
func ptrFromHandle_index_IndexInternalID(h CGoHandle) *index.IndexInternalID {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.IndexInternalID")
	if p == nil {
		return nil
	}
	return p.(*index.IndexInternalID)
}
func deptrFromHandle_index_IndexInternalID(h CGoHandle) index.IndexInternalID {
	p := ptrFromHandle_index_IndexInternalID(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_index_IndexInternalID(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.IndexInternalID", p))
}

// --- wrapping slice: index.IndexInternalID ---
//
//export index_IndexInternalID_CTor
func index_IndexInternalID_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_index_IndexInternalID(&index.IndexInternalID{}))
}

//export index_IndexInternalID_len
func index_IndexInternalID_len(handle CGoHandle) int {
	return len(deptrFromHandle_index_IndexInternalID(handle))
}

//export index_IndexInternalID_elem
func index_IndexInternalID_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_index_IndexInternalID(handle)
	return C.char(s[_idx])
}

//export index_IndexInternalID_subslice
func index_IndexInternalID_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_index_IndexInternalID(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_index_IndexInternalID(&ss))
}

//export index_IndexInternalID_set
func index_IndexInternalID_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_index_IndexInternalID(handle)
	s[_idx] = byte(_vl)
}

//export index_IndexInternalID_append
func index_IndexInternalID_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_index_IndexInternalID(handle)
	*s = append(*s, byte(_vl))
}

// Converters for pointer handles for type: index.IndexReader
func ptrFromHandle_index_IndexReader(h CGoHandle) index.IndexReader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.IndexReader")
	if p == nil {
		return nil
	}
	return p.(index.IndexReader)
}
func handleFromPtr_index_IndexReader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.IndexReader", p))
}

// Converters for non-pointer handles for type: index.TokenFreq
func ptrFromHandle_index_TokenFreq(h CGoHandle) *index.TokenFreq {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.TokenFreq")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(index.TokenFreq{})).(*index.TokenFreq)
}
func handleFromPtr_index_TokenFreq(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.TokenFreq", p))
}

// Converters for implicit pointer handles for type: index.TokenFrequencies
func ptrFromHandle_index_TokenFrequencies(h CGoHandle) *index.TokenFrequencies {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.TokenFrequencies")
	if p == nil {
		return nil
	}
	return p.(*index.TokenFrequencies)
}
func deptrFromHandle_index_TokenFrequencies(h CGoHandle) index.TokenFrequencies {
	p := ptrFromHandle_index_TokenFrequencies(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_index_TokenFrequencies(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.TokenFrequencies", p))
}

// --- wrapping map: index.TokenFrequencies ---
//
//export index_TokenFrequencies_CTor
func index_TokenFrequencies_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_index_TokenFrequencies(&index.TokenFrequencies{}))
}

//export index_TokenFrequencies_len
func index_TokenFrequencies_len(handle CGoHandle) int {
	return len(deptrFromHandle_index_TokenFrequencies(handle))
}

//export index_TokenFrequencies_elem
func index_TokenFrequencies_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_index_TokenFrequencies(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Ptr_index_TokenFreq(v)
}

//export index_TokenFrequencies_contains
func index_TokenFrequencies_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_index_TokenFrequencies(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export index_TokenFrequencies_set
func index_TokenFrequencies_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_index_TokenFrequencies(handle)
	s[C.GoString(_ky)] = ptrFromHandle_Ptr_index_TokenFreq(_vl)
}

//export index_TokenFrequencies_delete
func index_TokenFrequencies_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_index_TokenFrequencies(handle)
	delete(s, C.GoString(_ky))
}

//export index_TokenFrequencies_keys
func index_TokenFrequencies_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_index_TokenFrequencies(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for non-pointer handles for type: index.TokenLocation
func ptrFromHandle_index_TokenLocation(h CGoHandle) *index.TokenLocation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "index.TokenLocation")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(index.TokenLocation{})).(*index.TokenLocation)
}
func handleFromPtr_index_TokenLocation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("index.TokenLocation", p))
}

// Converters for pointer handles for type: io.WriteCloser
func ptrFromHandle_io_WriteCloser(h CGoHandle) io.WriteCloser {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "io.WriteCloser")
	if p == nil {
		return nil
	}
	return p.(io.WriteCloser)
}
func handleFromPtr_io_WriteCloser(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("io.WriteCloser", p))
}

// Converters for pointer handles for type: io.Writer
func ptrFromHandle_io_Writer(h CGoHandle) io.Writer {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "io.Writer")
	if p == nil {
		return nil
	}
	return p.(io.Writer)
}
func handleFromPtr_io_Writer(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("io.Writer", p))
}

// Converters for non-pointer handles for type: log.Logger
func ptrFromHandle_log_Logger(h CGoHandle) *log.Logger {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "log.Logger")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(log.Logger{})).(*log.Logger)
}
func handleFromPtr_log_Logger(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("log.Logger", p))
}

// Converters for pointer handles for type: sort.Interface
func ptrFromHandle_sort_Interface(h CGoHandle) sort.Interface {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "sort.Interface")
	if p == nil {
		return nil
	}
	return p.(sort.Interface)
}
func handleFromPtr_sort_Interface(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("sort.Interface", p))
}

// Converters for non-pointer handles for type: time.Location
func ptrFromHandle_time_Location(h CGoHandle) *time.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "time.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Location{})).(*time.Location)
}
func handleFromPtr_time_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("time.Location", p))
}

// Converters for non-pointer handles for type: time.Time
func ptrFromHandle_time_Time(h CGoHandle) *time.Time {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "time.Time")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Time{})).(*time.Time)
}
func handleFromPtr_time_Time(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("time.Time", p))
}

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: bleve ---

// ---- Types ---

// Converters for pointer handles for type: *bleve.Batch
func ptrFromHandle_Ptr_bleve_Batch(h CGoHandle) *bleve.Batch {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.Batch")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch)
}
func handleFromPtr_Ptr_bleve_Batch(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.Batch", p))
}

// Converters for pointer handles for type: *bleve.FacetRequest
func ptrFromHandle_Ptr_bleve_FacetRequest(h CGoHandle) *bleve.FacetRequest {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.FacetRequest")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.FacetRequest{})).(*bleve.FacetRequest)
}
func handleFromPtr_Ptr_bleve_FacetRequest(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.FacetRequest", p))
}

// Converters for pointer handles for type: *bleve.HighlightRequest
func ptrFromHandle_Ptr_bleve_HighlightRequest(h CGoHandle) *bleve.HighlightRequest {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.HighlightRequest")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.HighlightRequest{})).(*bleve.HighlightRequest)
}
func handleFromPtr_Ptr_bleve_HighlightRequest(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.HighlightRequest", p))
}

// Converters for pointer handles for type: *bleve.IndexStat
func ptrFromHandle_Ptr_bleve_IndexStat(h CGoHandle) *bleve.IndexStat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.IndexStat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.IndexStat{})).(*bleve.IndexStat)
}
func handleFromPtr_Ptr_bleve_IndexStat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.IndexStat", p))
}

// Converters for pointer handles for type: *bleve.IndexStats
func ptrFromHandle_Ptr_bleve_IndexStats(h CGoHandle) *bleve.IndexStats {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.IndexStats")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.IndexStats{})).(*bleve.IndexStats)
}
func handleFromPtr_Ptr_bleve_IndexStats(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.IndexStats", p))
}

// Converters for pointer handles for type: *bleve.SearchRequest
func ptrFromHandle_Ptr_bleve_SearchRequest(h CGoHandle) *bleve.SearchRequest {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.SearchRequest")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest)
}
func handleFromPtr_Ptr_bleve_SearchRequest(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.SearchRequest", p))
}

// Converters for pointer handles for type: *bleve.SearchResult
func ptrFromHandle_Ptr_bleve_SearchResult(h CGoHandle) *bleve.SearchResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.SearchResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.SearchResult{})).(*bleve.SearchResult)
}
func handleFromPtr_Ptr_bleve_SearchResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.SearchResult", p))
}

// Converters for pointer handles for type: *bleve.SearchStatus
func ptrFromHandle_Ptr_bleve_SearchStatus(h CGoHandle) *bleve.SearchStatus {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bleve.SearchStatus")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.SearchStatus{})).(*bleve.SearchStatus)
}
func handleFromPtr_Ptr_bleve_SearchStatus(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bleve.SearchStatus", p))
}

// Converters for implicit pointer handles for type: []*document.CompositeField
func ptrFromHandle_Slice_Ptr_document_CompositeField(h CGoHandle) *[]*document.CompositeField {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]*document.CompositeField")
	if p == nil {
		return nil
	}
	return p.(*[]*document.CompositeField)
}
func deptrFromHandle_Slice_Ptr_document_CompositeField(h CGoHandle) []*document.CompositeField {
	p := ptrFromHandle_Slice_Ptr_document_CompositeField(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Ptr_document_CompositeField(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]*document.CompositeField", p))
}

// --- wrapping slice: []*document.CompositeField ---
//
//export Slice_Ptr_document_CompositeField_CTor
func Slice_Ptr_document_CompositeField_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Ptr_document_CompositeField(&[]*document.CompositeField{}))
}

//export Slice_Ptr_document_CompositeField_len
func Slice_Ptr_document_CompositeField_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Ptr_document_CompositeField(handle))
}

//export Slice_Ptr_document_CompositeField_elem
func Slice_Ptr_document_CompositeField_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_document_CompositeField(handle)
	return handleFromPtr_Ptr_document_CompositeField(s[_idx])
}

//export Slice_Ptr_document_CompositeField_subslice
func Slice_Ptr_document_CompositeField_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_document_CompositeField(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Ptr_document_CompositeField(&ss))
}

//export Slice_Ptr_document_CompositeField_set
func Slice_Ptr_document_CompositeField_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Ptr_document_CompositeField(handle)
	s[_idx] = ptrFromHandle_Ptr_document_CompositeField(_vl)
}

//export Slice_Ptr_document_CompositeField_append
func Slice_Ptr_document_CompositeField_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Ptr_document_CompositeField(handle)
	*s = append(*s, ptrFromHandle_Ptr_document_CompositeField(_vl))
}

// Converters for implicit pointer handles for type: []*mapping.FieldMapping
func ptrFromHandle_Slice_Ptr_mapping_FieldMapping(h CGoHandle) *[]*mapping.FieldMapping {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]*mapping.FieldMapping")
	if p == nil {
		return nil
	}
	return p.(*[]*mapping.FieldMapping)
}
func deptrFromHandle_Slice_Ptr_mapping_FieldMapping(h CGoHandle) []*mapping.FieldMapping {
	p := ptrFromHandle_Slice_Ptr_mapping_FieldMapping(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Ptr_mapping_FieldMapping(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]*mapping.FieldMapping", p))
}

// --- wrapping slice: []*mapping.FieldMapping ---
//
//export Slice_Ptr_mapping_FieldMapping_CTor
func Slice_Ptr_mapping_FieldMapping_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Ptr_mapping_FieldMapping(&[]*mapping.FieldMapping{}))
}

//export Slice_Ptr_mapping_FieldMapping_len
func Slice_Ptr_mapping_FieldMapping_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Ptr_mapping_FieldMapping(handle))
}

//export Slice_Ptr_mapping_FieldMapping_elem
func Slice_Ptr_mapping_FieldMapping_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_mapping_FieldMapping(handle)
	return handleFromPtr_Ptr_mapping_FieldMapping(s[_idx])
}

//export Slice_Ptr_mapping_FieldMapping_subslice
func Slice_Ptr_mapping_FieldMapping_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_mapping_FieldMapping(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Ptr_mapping_FieldMapping(&ss))
}

//export Slice_Ptr_mapping_FieldMapping_set
func Slice_Ptr_mapping_FieldMapping_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Ptr_mapping_FieldMapping(handle)
	s[_idx] = ptrFromHandle_Ptr_mapping_FieldMapping(_vl)
}

//export Slice_Ptr_mapping_FieldMapping_append
func Slice_Ptr_mapping_FieldMapping_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Ptr_mapping_FieldMapping(handle)
	*s = append(*s, ptrFromHandle_Ptr_mapping_FieldMapping(_vl))
}

// Converters for implicit pointer handles for type: []*search.Explanation
func ptrFromHandle_Slice_Ptr_search_Explanation(h CGoHandle) *[]*search.Explanation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]*search.Explanation")
	if p == nil {
		return nil
	}
	return p.(*[]*search.Explanation)
}
func deptrFromHandle_Slice_Ptr_search_Explanation(h CGoHandle) []*search.Explanation {
	p := ptrFromHandle_Slice_Ptr_search_Explanation(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Ptr_search_Explanation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]*search.Explanation", p))
}

// --- wrapping slice: []*search.Explanation ---
//
//export Slice_Ptr_search_Explanation_CTor
func Slice_Ptr_search_Explanation_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Ptr_search_Explanation(&[]*search.Explanation{}))
}

//export Slice_Ptr_search_Explanation_len
func Slice_Ptr_search_Explanation_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Ptr_search_Explanation(handle))
}

//export Slice_Ptr_search_Explanation_elem
func Slice_Ptr_search_Explanation_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_search_Explanation(handle)
	return handleFromPtr_Ptr_search_Explanation(s[_idx])
}

//export Slice_Ptr_search_Explanation_subslice
func Slice_Ptr_search_Explanation_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_search_Explanation(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Ptr_search_Explanation(&ss))
}

//export Slice_Ptr_search_Explanation_set
func Slice_Ptr_search_Explanation_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Ptr_search_Explanation(handle)
	s[_idx] = ptrFromHandle_Ptr_search_Explanation(_vl)
}

//export Slice_Ptr_search_Explanation_append
func Slice_Ptr_search_Explanation_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Ptr_search_Explanation(handle)
	*s = append(*s, ptrFromHandle_Ptr_search_Explanation(_vl))
}

// Converters for implicit pointer handles for type: []*search.TermFacet
func ptrFromHandle_Slice_Ptr_search_TermFacet(h CGoHandle) *[]*search.TermFacet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]*search.TermFacet")
	if p == nil {
		return nil
	}
	return p.(*[]*search.TermFacet)
}
func deptrFromHandle_Slice_Ptr_search_TermFacet(h CGoHandle) []*search.TermFacet {
	p := ptrFromHandle_Slice_Ptr_search_TermFacet(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Ptr_search_TermFacet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]*search.TermFacet", p))
}

// --- wrapping slice: []*search.TermFacet ---
//
//export Slice_Ptr_search_TermFacet_CTor
func Slice_Ptr_search_TermFacet_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Ptr_search_TermFacet(&[]*search.TermFacet{}))
}

//export Slice_Ptr_search_TermFacet_len
func Slice_Ptr_search_TermFacet_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Ptr_search_TermFacet(handle))
}

//export Slice_Ptr_search_TermFacet_elem
func Slice_Ptr_search_TermFacet_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_search_TermFacet(handle)
	return handleFromPtr_Ptr_search_TermFacet(s[_idx])
}

//export Slice_Ptr_search_TermFacet_subslice
func Slice_Ptr_search_TermFacet_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_search_TermFacet(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Ptr_search_TermFacet(&ss))
}

//export Slice_Ptr_search_TermFacet_set
func Slice_Ptr_search_TermFacet_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Ptr_search_TermFacet(handle)
	s[_idx] = ptrFromHandle_Ptr_search_TermFacet(_vl)
}

//export Slice_Ptr_search_TermFacet_append
func Slice_Ptr_search_TermFacet_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Ptr_search_TermFacet(handle)
	*s = append(*s, ptrFromHandle_Ptr_search_TermFacet(_vl))
}

// Converters for implicit pointer handles for type: []*index.TokenLocation
func ptrFromHandle_Slice_Ptr_index_TokenLocation(h CGoHandle) *[]*index.TokenLocation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]*index.TokenLocation")
	if p == nil {
		return nil
	}
	return p.(*[]*index.TokenLocation)
}
func deptrFromHandle_Slice_Ptr_index_TokenLocation(h CGoHandle) []*index.TokenLocation {
	p := ptrFromHandle_Slice_Ptr_index_TokenLocation(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Ptr_index_TokenLocation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]*index.TokenLocation", p))
}

// --- wrapping slice: []*index.TokenLocation ---
//
//export Slice_Ptr_index_TokenLocation_CTor
func Slice_Ptr_index_TokenLocation_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Ptr_index_TokenLocation(&[]*index.TokenLocation{}))
}

//export Slice_Ptr_index_TokenLocation_len
func Slice_Ptr_index_TokenLocation_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Ptr_index_TokenLocation(handle))
}

//export Slice_Ptr_index_TokenLocation_elem
func Slice_Ptr_index_TokenLocation_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_index_TokenLocation(handle)
	return handleFromPtr_Ptr_index_TokenLocation(s[_idx])
}

//export Slice_Ptr_index_TokenLocation_subslice
func Slice_Ptr_index_TokenLocation_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_index_TokenLocation(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Ptr_index_TokenLocation(&ss))
}

//export Slice_Ptr_index_TokenLocation_set
func Slice_Ptr_index_TokenLocation_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Ptr_index_TokenLocation(handle)
	s[_idx] = ptrFromHandle_Ptr_index_TokenLocation(_vl)
}

//export Slice_Ptr_index_TokenLocation_append
func Slice_Ptr_index_TokenLocation_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Ptr_index_TokenLocation(handle)
	*s = append(*s, ptrFromHandle_Ptr_index_TokenLocation(_vl))
}

// Converters for implicit pointer handles for type: [][][][][]float64
func ptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(h CGoHandle) *[][][][][]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[][][][][]float64")
	if p == nil {
		return nil
	}
	return p.(*[][][][][]float64)
}
func deptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(h CGoHandle) [][][][][]float64 {
	p := ptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Slice_Slice_Slice_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[][][][][]float64", p))
}

// --- wrapping slice: [][][][][]float64 ---
//
//export Slice_Slice_Slice_Slice_Slice_float64_CTor
func Slice_Slice_Slice_Slice_Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Slice_Slice_Slice_Slice_float64(&[][][][][]float64{}))
}

//export Slice_Slice_Slice_Slice_Slice_float64_len
func Slice_Slice_Slice_Slice_Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(handle))
}

//export Slice_Slice_Slice_Slice_Slice_float64_elem
func Slice_Slice_Slice_Slice_Slice_float64_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(handle)
	return handleFromPtr_Slice_Slice_Slice_Slice_float64(s[_idx])
}

//export Slice_Slice_Slice_Slice_Slice_float64_subslice
func Slice_Slice_Slice_Slice_Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Slice_Slice_Slice_Slice_float64(&ss))
}

//export Slice_Slice_Slice_Slice_Slice_float64_set
func Slice_Slice_Slice_Slice_Slice_float64_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(handle)
	s[_idx] = deptrFromHandle_Slice_Slice_Slice_Slice_float64(_vl)
}

//export Slice_Slice_Slice_Slice_Slice_float64_append
func Slice_Slice_Slice_Slice_Slice_float64_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(handle)
	*s = append(*s, deptrFromHandle_Slice_Slice_Slice_Slice_float64(_vl))
}

// Converters for implicit pointer handles for type: [][][][]float64
func ptrFromHandle_Slice_Slice_Slice_Slice_float64(h CGoHandle) *[][][][]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[][][][]float64")
	if p == nil {
		return nil
	}
	return p.(*[][][][]float64)
}
func deptrFromHandle_Slice_Slice_Slice_Slice_float64(h CGoHandle) [][][][]float64 {
	p := ptrFromHandle_Slice_Slice_Slice_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Slice_Slice_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[][][][]float64", p))
}

// --- wrapping slice: [][][][]float64 ---
//
//export Slice_Slice_Slice_Slice_float64_CTor
func Slice_Slice_Slice_Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Slice_Slice_Slice_float64(&[][][][]float64{}))
}

//export Slice_Slice_Slice_Slice_float64_len
func Slice_Slice_Slice_Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Slice_Slice_Slice_float64(handle))
}

//export Slice_Slice_Slice_Slice_float64_elem
func Slice_Slice_Slice_Slice_float64_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_Slice_Slice_float64(handle)
	return handleFromPtr_Slice_Slice_Slice_float64(s[_idx])
}

//export Slice_Slice_Slice_Slice_float64_subslice
func Slice_Slice_Slice_Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_Slice_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Slice_Slice_Slice_float64(&ss))
}

//export Slice_Slice_Slice_Slice_float64_set
func Slice_Slice_Slice_Slice_float64_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Slice_Slice_Slice_float64(handle)
	s[_idx] = deptrFromHandle_Slice_Slice_Slice_float64(_vl)
}

//export Slice_Slice_Slice_Slice_float64_append
func Slice_Slice_Slice_Slice_float64_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Slice_Slice_Slice_float64(handle)
	*s = append(*s, deptrFromHandle_Slice_Slice_Slice_float64(_vl))
}

// Converters for implicit pointer handles for type: [][][]float64
func ptrFromHandle_Slice_Slice_Slice_float64(h CGoHandle) *[][][]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[][][]float64")
	if p == nil {
		return nil
	}
	return p.(*[][][]float64)
}
func deptrFromHandle_Slice_Slice_Slice_float64(h CGoHandle) [][][]float64 {
	p := ptrFromHandle_Slice_Slice_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Slice_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[][][]float64", p))
}

// --- wrapping slice: [][][]float64 ---
//
//export Slice_Slice_Slice_float64_CTor
func Slice_Slice_Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Slice_Slice_float64(&[][][]float64{}))
}

//export Slice_Slice_Slice_float64_len
func Slice_Slice_Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Slice_Slice_float64(handle))
}

//export Slice_Slice_Slice_float64_elem
func Slice_Slice_Slice_float64_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_Slice_float64(handle)
	return handleFromPtr_Slice_Slice_float64(s[_idx])
}

//export Slice_Slice_Slice_float64_subslice
func Slice_Slice_Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Slice_Slice_float64(&ss))
}

//export Slice_Slice_Slice_float64_set
func Slice_Slice_Slice_float64_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Slice_Slice_float64(handle)
	s[_idx] = deptrFromHandle_Slice_Slice_float64(_vl)
}

//export Slice_Slice_Slice_float64_append
func Slice_Slice_Slice_float64_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Slice_Slice_float64(handle)
	*s = append(*s, deptrFromHandle_Slice_Slice_float64(_vl))
}

// Converters for implicit pointer handles for type: [][]float64
func ptrFromHandle_Slice_Slice_float64(h CGoHandle) *[][]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[][]float64")
	if p == nil {
		return nil
	}
	return p.(*[][]float64)
}
func deptrFromHandle_Slice_Slice_float64(h CGoHandle) [][]float64 {
	p := ptrFromHandle_Slice_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[][]float64", p))
}

// --- wrapping slice: [][]float64 ---
//
//export Slice_Slice_float64_CTor
func Slice_Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Slice_float64(&[][]float64{}))
}

//export Slice_Slice_float64_len
func Slice_Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Slice_float64(handle))
}

//export Slice_Slice_float64_elem
func Slice_Slice_float64_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_float64(handle)
	return handleFromPtr_Slice_float64(s[_idx])
}

//export Slice_Slice_float64_subslice
func Slice_Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Slice_float64(&ss))
}

//export Slice_Slice_float64_set
func Slice_Slice_float64_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Slice_float64(handle)
	s[_idx] = deptrFromHandle_Slice_float64(_vl)
}

//export Slice_Slice_float64_append
func Slice_Slice_float64_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Slice_float64(handle)
	*s = append(*s, deptrFromHandle_Slice_float64(_vl))
}

// Converters for implicit pointer handles for type: []any
func ptrFromHandle_Slice_any(h CGoHandle) *[]any {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]any")
	if p == nil {
		return nil
	}
	return p.(*[]any)
}
func deptrFromHandle_Slice_any(h CGoHandle) []any {
	p := ptrFromHandle_Slice_any(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_any(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]any", p))
}

// --- wrapping slice: []any ---
//
//export Slice_any_CTor
func Slice_any_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_any(&[]any{}))
}

//export Slice_any_len
func Slice_any_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_any(handle))
}

//export Slice_any_elem
func Slice_any_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_any(handle)
	return handleFromPtr_any(s[_idx])
}

//export Slice_any_subslice
func Slice_any_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_any(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_any(&ss))
}

//export Slice_any_set
func Slice_any_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_any(handle)
	s[_idx] = ptrFromHandle_any(_vl)
}

//export Slice_any_append
func Slice_any_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_any(handle)
	*s = append(*s, ptrFromHandle_any(_vl))
}

// Converters for implicit pointer handles for type: []bleve.Index
func ptrFromHandle_Slice_bleve_Index(h CGoHandle) *[]bleve.Index {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bleve.Index")
	if p == nil {
		return nil
	}
	return p.(*[]bleve.Index)
}
func deptrFromHandle_Slice_bleve_Index(h CGoHandle) []bleve.Index {
	p := ptrFromHandle_Slice_bleve_Index(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bleve_Index(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bleve.Index", p))
}

// --- wrapping slice: []bleve.Index ---
//
//export Slice_bleve_Index_CTor
func Slice_bleve_Index_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bleve_Index(&[]bleve.Index{}))
}

//export Slice_bleve_Index_len
func Slice_bleve_Index_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bleve_Index(handle))
}

//export Slice_bleve_Index_elem
func Slice_bleve_Index_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_bleve_Index(handle)
	return handleFromPtr_bleve_Index(s[_idx])
}

//export Slice_bleve_Index_subslice
func Slice_bleve_Index_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bleve_Index(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bleve_Index(&ss))
}

//export Slice_bleve_Index_set
func Slice_bleve_Index_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_bleve_Index(handle)
	s[_idx] = ptrFromHandle_bleve_Index(_vl)
}

//export Slice_bleve_Index_append
func Slice_bleve_Index_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_bleve_Index(handle)
	*s = append(*s, ptrFromHandle_bleve_Index(_vl))
}

// Converters for implicit pointer handles for type: []document.Field
func ptrFromHandle_Slice_document_Field(h CGoHandle) *[]document.Field {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]document.Field")
	if p == nil {
		return nil
	}
	return p.(*[]document.Field)
}
func deptrFromHandle_Slice_document_Field(h CGoHandle) []document.Field {
	p := ptrFromHandle_Slice_document_Field(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_document_Field(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]document.Field", p))
}

// --- wrapping slice: []document.Field ---
//
//export Slice_document_Field_CTor
func Slice_document_Field_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_document_Field(&[]document.Field{}))
}

//export Slice_document_Field_len
func Slice_document_Field_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_document_Field(handle))
}

//export Slice_document_Field_elem
func Slice_document_Field_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_document_Field(handle)
	return handleFromPtr_document_Field(s[_idx])
}

//export Slice_document_Field_subslice
func Slice_document_Field_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_document_Field(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_document_Field(&ss))
}

//export Slice_document_Field_set
func Slice_document_Field_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_document_Field(handle)
	s[_idx] = ptrFromHandle_document_Field(_vl)
}

//export Slice_document_Field_append
func Slice_document_Field_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_document_Field(handle)
	*s = append(*s, ptrFromHandle_document_Field(_vl))
}

// Converters for implicit pointer handles for type: []search.FieldTermLocation
func ptrFromHandle_Slice_search_FieldTermLocation(h CGoHandle) *[]search.FieldTermLocation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]search.FieldTermLocation")
	if p == nil {
		return nil
	}
	return p.(*[]search.FieldTermLocation)
}
func deptrFromHandle_Slice_search_FieldTermLocation(h CGoHandle) []search.FieldTermLocation {
	p := ptrFromHandle_Slice_search_FieldTermLocation(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_search_FieldTermLocation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]search.FieldTermLocation", p))
}

// --- wrapping slice: []search.FieldTermLocation ---
//
//export Slice_search_FieldTermLocation_CTor
func Slice_search_FieldTermLocation_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_search_FieldTermLocation(&[]search.FieldTermLocation{}))
}

//export Slice_search_FieldTermLocation_len
func Slice_search_FieldTermLocation_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_search_FieldTermLocation(handle))
}

//export Slice_search_FieldTermLocation_elem
func Slice_search_FieldTermLocation_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_search_FieldTermLocation(handle)
	return handleFromPtr_search_FieldTermLocation(&(s[_idx]))
}

//export Slice_search_FieldTermLocation_subslice
func Slice_search_FieldTermLocation_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_search_FieldTermLocation(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_search_FieldTermLocation(&ss))
}

//export Slice_search_FieldTermLocation_set
func Slice_search_FieldTermLocation_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_search_FieldTermLocation(handle)
	s[_idx] = *ptrFromHandle_search_FieldTermLocation(_vl)
}

//export Slice_search_FieldTermLocation_append
func Slice_search_FieldTermLocation_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_search_FieldTermLocation(handle)
	*s = append(*s, *ptrFromHandle_search_FieldTermLocation(_vl))
}

// Converters for implicit pointer handles for type: []search.Location
func ptrFromHandle_Slice_search_Location(h CGoHandle) *[]search.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]search.Location")
	if p == nil {
		return nil
	}
	return p.(*[]search.Location)
}
func deptrFromHandle_Slice_search_Location(h CGoHandle) []search.Location {
	p := ptrFromHandle_Slice_search_Location(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_search_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]search.Location", p))
}

// --- wrapping slice: []search.Location ---
//
//export Slice_search_Location_CTor
func Slice_search_Location_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_search_Location(&[]search.Location{}))
}

//export Slice_search_Location_len
func Slice_search_Location_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_search_Location(handle))
}

//export Slice_search_Location_elem
func Slice_search_Location_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_search_Location(handle)
	return handleFromPtr_search_Location(&(s[_idx]))
}

//export Slice_search_Location_subslice
func Slice_search_Location_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_search_Location(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_search_Location(&ss))
}

//export Slice_search_Location_set
func Slice_search_Location_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_search_Location(handle)
	s[_idx] = *ptrFromHandle_search_Location(_vl)
}

//export Slice_search_Location_append
func Slice_search_Location_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_search_Location(handle)
	*s = append(*s, *ptrFromHandle_search_Location(_vl))
}

// Converters for implicit pointer handles for type: []query.Query
func ptrFromHandle_Slice_query_Query(h CGoHandle) *[]query.Query {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]query.Query")
	if p == nil {
		return nil
	}
	return p.(*[]query.Query)
}
func deptrFromHandle_Slice_query_Query(h CGoHandle) []query.Query {
	p := ptrFromHandle_Slice_query_Query(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_query_Query(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]query.Query", p))
}

// --- wrapping slice: []query.Query ---
//
//export Slice_query_Query_CTor
func Slice_query_Query_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_query_Query(&[]query.Query{}))
}

//export Slice_query_Query_len
func Slice_query_Query_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_query_Query(handle))
}

//export Slice_query_Query_elem
func Slice_query_Query_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_query_Query(handle)
	return handleFromPtr_query_Query(s[_idx])
}

//export Slice_query_Query_subslice
func Slice_query_Query_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_query_Query(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_query_Query(&ss))
}

//export Slice_query_Query_set
func Slice_query_Query_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_query_Query(handle)
	s[_idx] = ptrFromHandle_query_Query(_vl)
}

//export Slice_query_Query_append
func Slice_query_Query_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_query_Query(handle)
	*s = append(*s, ptrFromHandle_query_Query(_vl))
}

// Converters for pointer handles for type: any
func ptrFromHandle_any(h CGoHandle) any {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "any")
	if p == nil {
		return nil
	}
	return p.(any)
}
func handleFromPtr_any(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("any", p))
}

// Converters for non-pointer handles for type: bleve.Batch
func ptrFromHandle_bleve_Batch(h CGoHandle) *bleve.Batch {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.Batch")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch)
}
func handleFromPtr_bleve_Batch(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.Batch", p))
}

// Converters for pointer handles for type: bleve.Builder
func ptrFromHandle_bleve_Builder(h CGoHandle) bleve.Builder {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.Builder")
	if p == nil {
		return nil
	}
	return p.(bleve.Builder)
}
func handleFromPtr_bleve_Builder(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.Builder", p))
}

// Converters for non-pointer handles for type: bleve.FacetRequest
func ptrFromHandle_bleve_FacetRequest(h CGoHandle) *bleve.FacetRequest {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.FacetRequest")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.FacetRequest{})).(*bleve.FacetRequest)
}
func handleFromPtr_bleve_FacetRequest(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.FacetRequest", p))
}

// Converters for implicit pointer handles for type: bleve.FacetsRequest
func ptrFromHandle_bleve_FacetsRequest(h CGoHandle) *bleve.FacetsRequest {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.FacetsRequest")
	if p == nil {
		return nil
	}
	return p.(*bleve.FacetsRequest)
}
func deptrFromHandle_bleve_FacetsRequest(h CGoHandle) bleve.FacetsRequest {
	p := ptrFromHandle_bleve_FacetsRequest(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_bleve_FacetsRequest(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.FacetsRequest", p))
}

// Converters for non-pointer handles for type: bleve.HighlightRequest
func ptrFromHandle_bleve_HighlightRequest(h CGoHandle) *bleve.HighlightRequest {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.HighlightRequest")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.HighlightRequest{})).(*bleve.HighlightRequest)
}
func handleFromPtr_bleve_HighlightRequest(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.HighlightRequest", p))
}

// Converters for pointer handles for type: bleve.Index
func ptrFromHandle_bleve_Index(h CGoHandle) bleve.Index {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.Index")
	if p == nil {
		return nil
	}
	return p.(bleve.Index)
}
func handleFromPtr_bleve_Index(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.Index", p))
}

// Converters for pointer handles for type: bleve.IndexAlias
func ptrFromHandle_bleve_IndexAlias(h CGoHandle) bleve.IndexAlias {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.IndexAlias")
	if p == nil {
		return nil
	}
	return p.(bleve.IndexAlias)
}
func handleFromPtr_bleve_IndexAlias(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.IndexAlias", p))
}

// Converters for pointer handles for type: bleve.IndexCopyable
func ptrFromHandle_bleve_IndexCopyable(h CGoHandle) bleve.IndexCopyable {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.IndexCopyable")
	if p == nil {
		return nil
	}
	return p.(bleve.IndexCopyable)
}
func handleFromPtr_bleve_IndexCopyable(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.IndexCopyable", p))
}

// Converters for implicit pointer handles for type: bleve.IndexErrMap
func ptrFromHandle_bleve_IndexErrMap(h CGoHandle) *bleve.IndexErrMap {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.IndexErrMap")
	if p == nil {
		return nil
	}
	return p.(*bleve.IndexErrMap)
}
func deptrFromHandle_bleve_IndexErrMap(h CGoHandle) bleve.IndexErrMap {
	p := ptrFromHandle_bleve_IndexErrMap(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_bleve_IndexErrMap(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.IndexErrMap", p))
}

// Converters for non-pointer handles for type: bleve.IndexStat
func ptrFromHandle_bleve_IndexStat(h CGoHandle) *bleve.IndexStat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.IndexStat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.IndexStat{})).(*bleve.IndexStat)
}
func handleFromPtr_bleve_IndexStat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.IndexStat", p))
}

// Converters for non-pointer handles for type: bleve.IndexStats
func ptrFromHandle_bleve_IndexStats(h CGoHandle) *bleve.IndexStats {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.IndexStats")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.IndexStats{})).(*bleve.IndexStats)
}
func handleFromPtr_bleve_IndexStats(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.IndexStats", p))
}

// Converters for non-pointer handles for type: bleve.SearchRequest
func ptrFromHandle_bleve_SearchRequest(h CGoHandle) *bleve.SearchRequest {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.SearchRequest")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest)
}
func handleFromPtr_bleve_SearchRequest(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.SearchRequest", p))
}

// Converters for non-pointer handles for type: bleve.SearchResult
func ptrFromHandle_bleve_SearchResult(h CGoHandle) *bleve.SearchResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.SearchResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.SearchResult{})).(*bleve.SearchResult)
}
func handleFromPtr_bleve_SearchResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.SearchResult", p))
}

// Converters for non-pointer handles for type: bleve.SearchStatus
func ptrFromHandle_bleve_SearchStatus(h CGoHandle) *bleve.SearchStatus {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bleve.SearchStatus")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bleve.SearchStatus{})).(*bleve.SearchStatus)
}
func handleFromPtr_bleve_SearchStatus(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bleve.SearchStatus", p))
}

// Converters for implicit pointer handles for type: map[string]*mapping.DocumentMapping
func ptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(h CGoHandle) *map[string]*mapping.DocumentMapping {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]*mapping.DocumentMapping")
	if p == nil {
		return nil
	}
	return p.(*map[string]*mapping.DocumentMapping)
}
func deptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(h CGoHandle) map[string]*mapping.DocumentMapping {
	p := ptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_Ptr_mapping_DocumentMapping(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]*mapping.DocumentMapping", p))
}

// --- wrapping map: map[string]*mapping.DocumentMapping ---
//
//export Map_string_Ptr_mapping_DocumentMapping_CTor
func Map_string_Ptr_mapping_DocumentMapping_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_Ptr_mapping_DocumentMapping(&map[string]*mapping.DocumentMapping{}))
}

//export Map_string_Ptr_mapping_DocumentMapping_len
func Map_string_Ptr_mapping_DocumentMapping_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(handle))
}

//export Map_string_Ptr_mapping_DocumentMapping_elem
func Map_string_Ptr_mapping_DocumentMapping_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Ptr_mapping_DocumentMapping(v)
}

//export Map_string_Ptr_mapping_DocumentMapping_contains
func Map_string_Ptr_mapping_DocumentMapping_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_Ptr_mapping_DocumentMapping_set
func Map_string_Ptr_mapping_DocumentMapping_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(handle)
	s[C.GoString(_ky)] = ptrFromHandle_Ptr_mapping_DocumentMapping(_vl)
}

//export Map_string_Ptr_mapping_DocumentMapping_delete
func Map_string_Ptr_mapping_DocumentMapping_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_Ptr_mapping_DocumentMapping_keys
func Map_string_Ptr_mapping_DocumentMapping_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_mapping_DocumentMapping(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]interface{}
func ptrFromHandle_Map_string_interface_(h CGoHandle) *map[string]interface{} {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]interface{}")
	if p == nil {
		return nil
	}
	return p.(*map[string]interface{})
}
func deptrFromHandle_Map_string_interface_(h CGoHandle) map[string]interface{} {
	p := ptrFromHandle_Map_string_interface_(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_interface_(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]interface{}", p))
}

// --- wrapping map: map[string]interface{} ---
//
//export Map_string_interface__CTor
func Map_string_interface__CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_interface_(&map[string]interface{}{}))
}

//export Map_string_interface__len
func Map_string_interface__len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_interface_(handle))
}

//export Map_string_interface__elem
func Map_string_interface__elem(handle CGoHandle, _ky *C.char) *C.char {
	s := deptrFromHandle_Map_string_interface_(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.CString(fmt.Sprintf("%s", (v)))
}

//export Map_string_interface__contains
func Map_string_interface__contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_interface_(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_interface__set
func Map_string_interface__set(handle CGoHandle, _ky *C.char, _vl *C.char) {
	s := deptrFromHandle_Map_string_interface_(handle)
	s[C.GoString(_ky)] = C.GoString(_vl)
}

//export Map_string_interface__delete
func Map_string_interface__delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_interface_(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_interface__keys
func Map_string_interface__keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_interface_(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// ---- Global Variables: can only use functions to access ---

// ---- Interfaces ---

//export bleve_Builder_Close
func bleve_Builder_Close(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Builder")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Builder).Close()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Builder_Index
func bleve_Builder_Index(_handle CGoHandle, id *C.char, data *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Builder")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Builder).Index(C.GoString(id), C.GoString(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Index_Advanced
func bleve_Index_Advanced(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_index_Index(nil)
	}
	cret, __err := vifc.(bleve.Index).Advanced()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_Index(nil)
	}
	return handleFromPtr_index_Index(cret)
}

//export bleve_Index_Batch
func bleve_Index_Batch(_handle CGoHandle, b CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Index).Batch(ptrFromHandle_Ptr_bleve_Batch(b))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Index_Close
func bleve_Index_Close(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Index).Close()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Index_Delete
func bleve_Index_Delete(_handle CGoHandle, id *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Index).Delete(C.GoString(id))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Index_DeleteInternal
func bleve_Index_DeleteInternal(_handle CGoHandle, key CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Index).DeleteInternal(deptrFromHandle_Slice_byte(key))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Index_DocCount
func bleve_Index_DocCount(_handle CGoHandle) C.ulonglong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return C.ulonglong(0)
	}
	cret, __err := vifc.(bleve.Index).DocCount()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.ulonglong(0)
	}
	return C.ulonglong(cret)
}

//export bleve_Index_Document
func bleve_Index_Document(_handle CGoHandle, id *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_index_Document(nil)
	}
	cret, __err := vifc.(bleve.Index).Document(C.GoString(id))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_Document(nil)
	}
	return handleFromPtr_index_Document(cret)
}

//export bleve_Index_FieldDict
func bleve_Index_FieldDict(_handle CGoHandle, field *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_index_FieldDict(nil)
	}
	cret, __err := vifc.(bleve.Index).FieldDict(C.GoString(field))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_FieldDict(nil)
	}
	return handleFromPtr_index_FieldDict(cret)
}

//export bleve_Index_FieldDictPrefix
func bleve_Index_FieldDictPrefix(_handle CGoHandle, field *C.char, termPrefix CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_index_FieldDict(nil)
	}
	cret, __err := vifc.(bleve.Index).FieldDictPrefix(C.GoString(field), deptrFromHandle_Slice_byte(termPrefix))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_FieldDict(nil)
	}
	return handleFromPtr_index_FieldDict(cret)
}

//export bleve_Index_FieldDictRange
func bleve_Index_FieldDictRange(_handle CGoHandle, field *C.char, startTerm CGoHandle, endTerm CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_index_FieldDict(nil)
	}
	cret, __err := vifc.(bleve.Index).FieldDictRange(C.GoString(field), deptrFromHandle_Slice_byte(startTerm), deptrFromHandle_Slice_byte(endTerm))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_FieldDict(nil)
	}
	return handleFromPtr_index_FieldDict(cret)
}

//export bleve_Index_Fields
func bleve_Index_Fields(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret, __err := vifc.(bleve.Index).Fields()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_string(nil)
	}
	return handleFromPtr_Slice_string(&cret)
}

//export bleve_Index_GetInternal
func bleve_Index_GetInternal(_handle CGoHandle, key CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_Slice_byte(nil)
	}
	cret, __err := vifc.(bleve.Index).GetInternal(deptrFromHandle_Slice_byte(key))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_byte(nil)
	}
	return handleFromPtr_Slice_byte(&cret)
}

//export bleve_Index_Index
func bleve_Index_Index(_handle CGoHandle, id *C.char, data *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Index).Index(C.GoString(id), C.GoString(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Index_Mapping
func bleve_Index_Mapping(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_mapping_IndexMapping(nil)
	}
	return handleFromPtr_mapping_IndexMapping(vifc.(bleve.Index).Mapping())

}

//export bleve_Index_Name
func bleve_Index_Name(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(vifc.(bleve.Index).Name())

}

//export bleve_Index_NewBatch
func bleve_Index_NewBatch(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_Batch(nil)
	}
	return handleFromPtr_Ptr_bleve_Batch(vifc.(bleve.Index).NewBatch())

}

//export bleve_Index_Search
func bleve_Index_Search(_handle CGoHandle, req CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	cret, __err := vifc.(bleve.Index).Search(ptrFromHandle_Ptr_bleve_SearchRequest(req))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	return handleFromPtr_Ptr_bleve_SearchResult(cret)
}

//export bleve_Index_SearchInContext
func bleve_Index_SearchInContext(_handle CGoHandle, ctx CGoHandle, req CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	cret, __err := vifc.(bleve.Index).SearchInContext(ptrFromHandle_context_Context(ctx), ptrFromHandle_Ptr_bleve_SearchRequest(req))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	return handleFromPtr_Ptr_bleve_SearchResult(cret)
}

//export bleve_Index_SetInternal
func bleve_Index_SetInternal(_handle CGoHandle, key CGoHandle, val CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.Index).SetInternal(deptrFromHandle_Slice_byte(key), deptrFromHandle_Slice_byte(val))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Index_SetName
func bleve_Index_SetName(_handle CGoHandle, arg_0 *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go vifc.(bleve.Index).SetName(C.GoString(arg_0))
	} else {
		vifc.(bleve.Index).SetName(C.GoString(arg_0))
	}
}

//export bleve_Index_Stats
func bleve_Index_Stats(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_IndexStat(nil)
	}
	return handleFromPtr_Ptr_bleve_IndexStat(vifc.(bleve.Index).Stats())

}

//export bleve_Index_StatsMap
func bleve_Index_StatsMap(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.Index")
	if __err != nil {
		return handleFromPtr_Map_string_interface_(nil)
	}
	cret := vifc.(bleve.Index).StatsMap()

	return handleFromPtr_Map_string_interface_(&cret)
}

//export bleve_IndexAlias_Add
func bleve_IndexAlias_Add(_handle CGoHandle, i CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go vifc.(bleve.IndexAlias).Add(deptrFromHandle_Slice_bleve_Index(i)...)
	} else {
		vifc.(bleve.IndexAlias).Add(deptrFromHandle_Slice_bleve_Index(i)...)
	}
}

//export bleve_IndexAlias_Advanced
func bleve_IndexAlias_Advanced(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_index_Index(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).Advanced()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_Index(nil)
	}
	return handleFromPtr_index_Index(cret)
}

//export bleve_IndexAlias_Batch
func bleve_IndexAlias_Batch(_handle CGoHandle, b CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.IndexAlias).Batch(ptrFromHandle_Ptr_bleve_Batch(b))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_IndexAlias_Close
func bleve_IndexAlias_Close(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.IndexAlias).Close()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_IndexAlias_Delete
func bleve_IndexAlias_Delete(_handle CGoHandle, id *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.IndexAlias).Delete(C.GoString(id))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_IndexAlias_DeleteInternal
func bleve_IndexAlias_DeleteInternal(_handle CGoHandle, key CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.IndexAlias).DeleteInternal(deptrFromHandle_Slice_byte(key))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_IndexAlias_DocCount
func bleve_IndexAlias_DocCount(_handle CGoHandle) C.ulonglong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return C.ulonglong(0)
	}
	cret, __err := vifc.(bleve.IndexAlias).DocCount()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.ulonglong(0)
	}
	return C.ulonglong(cret)
}

//export bleve_IndexAlias_Document
func bleve_IndexAlias_Document(_handle CGoHandle, id *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_index_Document(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).Document(C.GoString(id))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_Document(nil)
	}
	return handleFromPtr_index_Document(cret)
}

//export bleve_IndexAlias_FieldDict
func bleve_IndexAlias_FieldDict(_handle CGoHandle, field *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_index_FieldDict(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).FieldDict(C.GoString(field))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_FieldDict(nil)
	}
	return handleFromPtr_index_FieldDict(cret)
}

//export bleve_IndexAlias_FieldDictPrefix
func bleve_IndexAlias_FieldDictPrefix(_handle CGoHandle, field *C.char, termPrefix CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_index_FieldDict(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).FieldDictPrefix(C.GoString(field), deptrFromHandle_Slice_byte(termPrefix))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_FieldDict(nil)
	}
	return handleFromPtr_index_FieldDict(cret)
}

//export bleve_IndexAlias_FieldDictRange
func bleve_IndexAlias_FieldDictRange(_handle CGoHandle, field *C.char, startTerm CGoHandle, endTerm CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_index_FieldDict(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).FieldDictRange(C.GoString(field), deptrFromHandle_Slice_byte(startTerm), deptrFromHandle_Slice_byte(endTerm))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_index_FieldDict(nil)
	}
	return handleFromPtr_index_FieldDict(cret)
}

//export bleve_IndexAlias_Fields
func bleve_IndexAlias_Fields(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).Fields()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_string(nil)
	}
	return handleFromPtr_Slice_string(&cret)
}

//export bleve_IndexAlias_GetInternal
func bleve_IndexAlias_GetInternal(_handle CGoHandle, key CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_Slice_byte(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).GetInternal(deptrFromHandle_Slice_byte(key))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_byte(nil)
	}
	return handleFromPtr_Slice_byte(&cret)
}

//export bleve_IndexAlias_Index
func bleve_IndexAlias_Index(_handle CGoHandle, id *C.char, data *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.IndexAlias).Index(C.GoString(id), C.GoString(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_IndexAlias_Mapping
func bleve_IndexAlias_Mapping(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_mapping_IndexMapping(nil)
	}
	return handleFromPtr_mapping_IndexMapping(vifc.(bleve.IndexAlias).Mapping())

}

//export bleve_IndexAlias_Name
func bleve_IndexAlias_Name(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(vifc.(bleve.IndexAlias).Name())

}

//export bleve_IndexAlias_NewBatch
func bleve_IndexAlias_NewBatch(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_Batch(nil)
	}
	return handleFromPtr_Ptr_bleve_Batch(vifc.(bleve.IndexAlias).NewBatch())

}

//export bleve_IndexAlias_Remove
func bleve_IndexAlias_Remove(_handle CGoHandle, i CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go vifc.(bleve.IndexAlias).Remove(deptrFromHandle_Slice_bleve_Index(i)...)
	} else {
		vifc.(bleve.IndexAlias).Remove(deptrFromHandle_Slice_bleve_Index(i)...)
	}
}

//export bleve_IndexAlias_Search
func bleve_IndexAlias_Search(_handle CGoHandle, req CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).Search(ptrFromHandle_Ptr_bleve_SearchRequest(req))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	return handleFromPtr_Ptr_bleve_SearchResult(cret)
}

//export bleve_IndexAlias_SearchInContext
func bleve_IndexAlias_SearchInContext(_handle CGoHandle, ctx CGoHandle, req CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	cret, __err := vifc.(bleve.IndexAlias).SearchInContext(ptrFromHandle_context_Context(ctx), ptrFromHandle_Ptr_bleve_SearchRequest(req))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	return handleFromPtr_Ptr_bleve_SearchResult(cret)
}

//export bleve_IndexAlias_SetInternal
func bleve_IndexAlias_SetInternal(_handle CGoHandle, key CGoHandle, val CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.IndexAlias).SetInternal(deptrFromHandle_Slice_byte(key), deptrFromHandle_Slice_byte(val))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_IndexAlias_SetName
func bleve_IndexAlias_SetName(_handle CGoHandle, arg_0 *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go vifc.(bleve.IndexAlias).SetName(C.GoString(arg_0))
	} else {
		vifc.(bleve.IndexAlias).SetName(C.GoString(arg_0))
	}
}

//export bleve_IndexAlias_Stats
func bleve_IndexAlias_Stats(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_Ptr_bleve_IndexStat(nil)
	}
	return handleFromPtr_Ptr_bleve_IndexStat(vifc.(bleve.IndexAlias).Stats())

}

//export bleve_IndexAlias_StatsMap
func bleve_IndexAlias_StatsMap(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return handleFromPtr_Map_string_interface_(nil)
	}
	cret := vifc.(bleve.IndexAlias).StatsMap()

	return handleFromPtr_Map_string_interface_(&cret)
}

//export bleve_IndexAlias_Swap
func bleve_IndexAlias_Swap(_handle CGoHandle, myin CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexAlias")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go vifc.(bleve.IndexAlias).Swap(deptrFromHandle_Slice_bleve_Index(myin), deptrFromHandle_Slice_bleve_Index(out))
	} else {
		vifc.(bleve.IndexAlias).Swap(deptrFromHandle_Slice_bleve_Index(myin), deptrFromHandle_Slice_bleve_Index(out))
	}
}

//export bleve_IndexCopyable_CopyTo
func bleve_IndexCopyable_CopyTo(_handle CGoHandle, d CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "bleve.IndexCopyable")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(bleve.IndexCopyable).CopyTo(ptrFromHandle_index_Directory(d))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

// ---- Structs ---

// --- wrapping struct: bleve.SearchRequest ---
//
//export bleve_SearchRequest_CTor
func bleve_SearchRequest_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_SearchRequest(&bleve.SearchRequest{}))
}

//export bleve_SearchRequest_Query_Get
func bleve_SearchRequest_Query_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return handleFromPtr_query_Query(op.Query)
}

//export bleve_SearchRequest_Query_Set
func bleve_SearchRequest_Query_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Query = ptrFromHandle_query_Query(val)
}

//export bleve_SearchRequest_Size_Get
func bleve_SearchRequest_Size_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return C.longlong(op.Size)
}

//export bleve_SearchRequest_Size_Set
func bleve_SearchRequest_Size_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Size = int(val)
}

//export bleve_SearchRequest_From_Get
func bleve_SearchRequest_From_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return C.longlong(op.From)
}

//export bleve_SearchRequest_From_Set
func bleve_SearchRequest_From_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.From = int(val)
}

//export bleve_SearchRequest_Highlight_Get
func bleve_SearchRequest_Highlight_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return handleFromPtr_Ptr_bleve_HighlightRequest(op.Highlight)
}

//export bleve_SearchRequest_Highlight_Set
func bleve_SearchRequest_Highlight_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Highlight = ptrFromHandle_Ptr_bleve_HighlightRequest(val)
}

//export bleve_SearchRequest_Fields_Get
func bleve_SearchRequest_Fields_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return handleFromPtr_Slice_string(&op.Fields)
}

//export bleve_SearchRequest_Fields_Set
func bleve_SearchRequest_Fields_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Fields = deptrFromHandle_Slice_string(val)
}

//export bleve_SearchRequest_Facets_Get
func bleve_SearchRequest_Facets_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return handleFromPtr_bleve_FacetsRequest(&op.Facets)
}

//export bleve_SearchRequest_Facets_Set
func bleve_SearchRequest_Facets_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Facets = deptrFromHandle_bleve_FacetsRequest(val)
}

//export bleve_SearchRequest_Explain_Get
func bleve_SearchRequest_Explain_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return boolGoToPy(op.Explain)
}

//export bleve_SearchRequest_Explain_Set
func bleve_SearchRequest_Explain_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Explain = boolPyToGo(val)
}

//export bleve_SearchRequest_Sort_Get
func bleve_SearchRequest_Sort_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return handleFromPtr_search_SortOrder(&op.Sort)
}

//export bleve_SearchRequest_Sort_Set
func bleve_SearchRequest_Sort_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Sort = deptrFromHandle_search_SortOrder(val)
}

//export bleve_SearchRequest_IncludeLocations_Get
func bleve_SearchRequest_IncludeLocations_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return boolGoToPy(op.IncludeLocations)
}

//export bleve_SearchRequest_IncludeLocations_Set
func bleve_SearchRequest_IncludeLocations_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.IncludeLocations = boolPyToGo(val)
}

//export bleve_SearchRequest_Score_Get
func bleve_SearchRequest_Score_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return C.CString(op.Score)
}

//export bleve_SearchRequest_Score_Set
func bleve_SearchRequest_Score_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.Score = C.GoString(val)
}

//export bleve_SearchRequest_SearchAfter_Get
func bleve_SearchRequest_SearchAfter_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return handleFromPtr_Slice_string(&op.SearchAfter)
}

//export bleve_SearchRequest_SearchAfter_Set
func bleve_SearchRequest_SearchAfter_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.SearchAfter = deptrFromHandle_Slice_string(val)
}

//export bleve_SearchRequest_SearchBefore_Get
func bleve_SearchRequest_SearchBefore_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	return handleFromPtr_Slice_string(&op.SearchBefore)
}

//export bleve_SearchRequest_SearchBefore_Set
func bleve_SearchRequest_SearchBefore_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchRequest(handle)
	op.SearchBefore = deptrFromHandle_Slice_string(val)
}

//export bleve_SearchRequest_Validate
func bleve_SearchRequest_Validate(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).Validate()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_SearchRequest_AddFacet
func bleve_SearchRequest_AddFacet(_handle CGoHandle, facetName *C.char, f CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).AddFacet(C.GoString(facetName), ptrFromHandle_Ptr_bleve_FacetRequest(f))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).AddFacet(C.GoString(facetName), ptrFromHandle_Ptr_bleve_FacetRequest(f))
	}
}

//export bleve_SearchRequest_SortBy
func bleve_SearchRequest_SortBy(_handle CGoHandle, order CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SortBy(deptrFromHandle_Slice_string(order))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SortBy(deptrFromHandle_Slice_string(order))
	}
}

//export bleve_SearchRequest_SortByCustom
func bleve_SearchRequest_SortByCustom(_handle CGoHandle, order CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SortByCustom(deptrFromHandle_search_SortOrder(order))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SortByCustom(deptrFromHandle_search_SortOrder(order))
	}
}

//export bleve_SearchRequest_SetSearchAfter
func bleve_SearchRequest_SetSearchAfter(_handle CGoHandle, after CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SetSearchAfter(deptrFromHandle_Slice_string(after))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SetSearchAfter(deptrFromHandle_Slice_string(after))
	}
}

//export bleve_SearchRequest_SetSearchBefore
func bleve_SearchRequest_SetSearchBefore(_handle CGoHandle, before CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SetSearchBefore(deptrFromHandle_Slice_string(before))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SetSearchBefore(deptrFromHandle_Slice_string(before))
	}
}

//export bleve_SearchRequest_UnmarshalJSON
func bleve_SearchRequest_UnmarshalJSON(_handle CGoHandle, input CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).UnmarshalJSON(deptrFromHandle_Slice_byte(input))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_SearchRequest_SetSortFunc
func bleve_SearchRequest_SetSortFunc(_handle CGoHandle, s *C.PyObject, goRun C.char) {
	_fun_arg := s
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SetSortFunc(func(arg_0 sort.Interface) {
			if C.PyCallable_Check(_fun_arg) == 0 {
				return
			}
			_gstate := C.PyGILState_Ensure()
			_fcargs := C.PyTuple_New(1)
			C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_int64(C.int64_t(handleFromPtr_sort_Interface(arg_0))))
			C.PyObject_CallObject(_fun_arg, _fcargs)
			C.gopy_decref(_fcargs)
			C.gopy_err_handle()
			C.PyGILState_Release(_gstate)
		})
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchRequest{})).(*bleve.SearchRequest).SetSortFunc(func(arg_0 sort.Interface) {
			if C.PyCallable_Check(_fun_arg) == 0 {
				return
			}
			_gstate := C.PyGILState_Ensure()
			_fcargs := C.PyTuple_New(1)
			C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_int64(C.int64_t(handleFromPtr_sort_Interface(arg_0))))
			C.PyObject_CallObject(_fun_arg, _fcargs)
			C.gopy_decref(_fcargs)
			C.gopy_err_handle()
			C.PyGILState_Release(_gstate)
		})
	}
}

// --- wrapping struct: bleve.SearchResult ---
//
//export bleve_SearchResult_CTor
func bleve_SearchResult_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_SearchResult(&bleve.SearchResult{}))
}

//export bleve_SearchResult_Status_Get
func bleve_SearchResult_Status_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return handleFromPtr_Ptr_bleve_SearchStatus(op.Status)
}

//export bleve_SearchResult_Status_Set
func bleve_SearchResult_Status_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.Status = ptrFromHandle_Ptr_bleve_SearchStatus(val)
}

//export bleve_SearchResult_Request_Get
func bleve_SearchResult_Request_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return handleFromPtr_Ptr_bleve_SearchRequest(op.Request)
}

//export bleve_SearchResult_Request_Set
func bleve_SearchResult_Request_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.Request = ptrFromHandle_Ptr_bleve_SearchRequest(val)
}

//export bleve_SearchResult_Hits_Get
func bleve_SearchResult_Hits_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return handleFromPtr_search_DocumentMatchCollection(&op.Hits)
}

//export bleve_SearchResult_Hits_Set
func bleve_SearchResult_Hits_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.Hits = deptrFromHandle_search_DocumentMatchCollection(val)
}

//export bleve_SearchResult_Total_Get
func bleve_SearchResult_Total_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return C.ulonglong(op.Total)
}

//export bleve_SearchResult_Total_Set
func bleve_SearchResult_Total_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.Total = uint64(val)
}

//export bleve_SearchResult_Cost_Get
func bleve_SearchResult_Cost_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return C.ulonglong(op.Cost)
}

//export bleve_SearchResult_Cost_Set
func bleve_SearchResult_Cost_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.Cost = uint64(val)
}

//export bleve_SearchResult_MaxScore_Get
func bleve_SearchResult_MaxScore_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return C.double(op.MaxScore)
}

//export bleve_SearchResult_MaxScore_Set
func bleve_SearchResult_MaxScore_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.MaxScore = float64(val)
}

//export bleve_SearchResult_Took_Get
func bleve_SearchResult_Took_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return C.longlong(int64(op.Took))
}

//export bleve_SearchResult_Took_Set
func bleve_SearchResult_Took_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.Took = time.Duration(int64(val))
}

//export bleve_SearchResult_Facets_Get
func bleve_SearchResult_Facets_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchResult(handle)
	return handleFromPtr_search_FacetResults(&op.Facets)
}

//export bleve_SearchResult_Facets_Set
func bleve_SearchResult_Facets_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchResult(handle)
	op.Facets = deptrFromHandle_search_FacetResults(val)
}

//export bleve_SearchResult_Size
func bleve_SearchResult_Size(_handle CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchResult")
	if __err != nil {
		return C.longlong(0)
	}
	return C.longlong(gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchResult{})).(*bleve.SearchResult).Size())

}

//export bleve_SearchResult_String
func bleve_SearchResult_String(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchResult")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchResult{})).(*bleve.SearchResult).String())

}

//export bleve_SearchResult_Merge
func bleve_SearchResult_Merge(_handle CGoHandle, other CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchResult")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchResult{})).(*bleve.SearchResult).Merge(ptrFromHandle_Ptr_bleve_SearchResult(other))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchResult{})).(*bleve.SearchResult).Merge(ptrFromHandle_Ptr_bleve_SearchResult(other))
	}
}

// --- wrapping struct: bleve.SearchStatus ---
//
//export bleve_SearchStatus_CTor
func bleve_SearchStatus_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_SearchStatus(&bleve.SearchStatus{}))
}

//export bleve_SearchStatus_Total_Get
func bleve_SearchStatus_Total_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	return C.longlong(op.Total)
}

//export bleve_SearchStatus_Total_Set
func bleve_SearchStatus_Total_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	op.Total = int(val)
}

//export bleve_SearchStatus_Failed_Get
func bleve_SearchStatus_Failed_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	return C.longlong(op.Failed)
}

//export bleve_SearchStatus_Failed_Set
func bleve_SearchStatus_Failed_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	op.Failed = int(val)
}

//export bleve_SearchStatus_Successful_Get
func bleve_SearchStatus_Successful_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	return C.longlong(op.Successful)
}

//export bleve_SearchStatus_Successful_Set
func bleve_SearchStatus_Successful_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	op.Successful = int(val)
}

//export bleve_SearchStatus_Errors_Get
func bleve_SearchStatus_Errors_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	return handleFromPtr_bleve_IndexErrMap(&op.Errors)
}

//export bleve_SearchStatus_Errors_Set
func bleve_SearchStatus_Errors_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_SearchStatus(handle)
	op.Errors = deptrFromHandle_bleve_IndexErrMap(val)
}

//export bleve_SearchStatus_Merge
func bleve_SearchStatus_Merge(_handle CGoHandle, other CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.SearchStatus")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchStatus{})).(*bleve.SearchStatus).Merge(ptrFromHandle_Ptr_bleve_SearchStatus(other))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.SearchStatus{})).(*bleve.SearchStatus).Merge(ptrFromHandle_Ptr_bleve_SearchStatus(other))
	}
}

// --- wrapping struct: bleve.Batch ---
//
//export bleve_Batch_CTor
func bleve_Batch_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_Batch(&bleve.Batch{}))
}

//export bleve_Batch_Index
func bleve_Batch_Index(_handle CGoHandle, id *C.char, data *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Index(C.GoString(id), C.GoString(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Batch_LastDocSize
func bleve_Batch_LastDocSize(_handle CGoHandle) C.ulonglong {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return C.ulonglong(0)
	}
	return C.ulonglong(gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).LastDocSize())

}

//export bleve_Batch_TotalDocsSize
func bleve_Batch_TotalDocsSize(_handle CGoHandle) C.ulonglong {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return C.ulonglong(0)
	}
	return C.ulonglong(gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).TotalDocsSize())

}

//export bleve_Batch_IndexAdvanced
func bleve_Batch_IndexAdvanced(_handle CGoHandle, doc CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).IndexAdvanced(ptrFromHandle_Ptr_document_Document(doc))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_Batch_Delete
func bleve_Batch_Delete(_handle CGoHandle, id *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Delete(C.GoString(id))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Delete(C.GoString(id))
	}
}

//export bleve_Batch_SetInternal
func bleve_Batch_SetInternal(_handle CGoHandle, key CGoHandle, val CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).SetInternal(deptrFromHandle_Slice_byte(key), deptrFromHandle_Slice_byte(val))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).SetInternal(deptrFromHandle_Slice_byte(key), deptrFromHandle_Slice_byte(val))
	}
}

//export bleve_Batch_DeleteInternal
func bleve_Batch_DeleteInternal(_handle CGoHandle, key CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).DeleteInternal(deptrFromHandle_Slice_byte(key))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).DeleteInternal(deptrFromHandle_Slice_byte(key))
	}
}

//export bleve_Batch_Size
func bleve_Batch_Size(_handle CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return C.longlong(0)
	}
	return C.longlong(gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Size())

}

//export bleve_Batch_String
func bleve_Batch_String(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).String())

}

//export bleve_Batch_Reset
func bleve_Batch_Reset(_handle CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Reset()
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Reset()
	}
}

//export bleve_Batch_Merge
func bleve_Batch_Merge(_handle CGoHandle, o CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.Batch")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Merge(ptrFromHandle_Ptr_bleve_Batch(o))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.Batch{})).(*bleve.Batch).Merge(ptrFromHandle_Ptr_bleve_Batch(o))
	}
}

// --- wrapping struct: bleve.FacetRequest ---
//
//export bleve_FacetRequest_CTor
func bleve_FacetRequest_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_FacetRequest(&bleve.FacetRequest{}))
}

//export bleve_FacetRequest_Size_Get
func bleve_FacetRequest_Size_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_bleve_FacetRequest(handle)
	return C.longlong(op.Size)
}

//export bleve_FacetRequest_Size_Set
func bleve_FacetRequest_Size_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_bleve_FacetRequest(handle)
	op.Size = int(val)
}

//export bleve_FacetRequest_Field_Get
func bleve_FacetRequest_Field_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_bleve_FacetRequest(handle)
	return C.CString(op.Field)
}

//export bleve_FacetRequest_Field_Set
func bleve_FacetRequest_Field_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_bleve_FacetRequest(handle)
	op.Field = C.GoString(val)
}

//export bleve_FacetRequest_Validate
func bleve_FacetRequest_Validate(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.FacetRequest")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(bleve.FacetRequest{})).(*bleve.FacetRequest).Validate()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export bleve_FacetRequest_AddDateTimeRange
func bleve_FacetRequest_AddDateTimeRange(_handle CGoHandle, name *C.char, start CGoHandle, end CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.FacetRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.FacetRequest{})).(*bleve.FacetRequest).AddDateTimeRange(C.GoString(name), *ptrFromHandle_time_Time(start), *ptrFromHandle_time_Time(end))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.FacetRequest{})).(*bleve.FacetRequest).AddDateTimeRange(C.GoString(name), *ptrFromHandle_time_Time(start), *ptrFromHandle_time_Time(end))
	}
}

// --- wrapping struct: bleve.HighlightRequest ---
//
//export bleve_HighlightRequest_CTor
func bleve_HighlightRequest_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_HighlightRequest(&bleve.HighlightRequest{}))
}

//export bleve_HighlightRequest_Fields_Get
func bleve_HighlightRequest_Fields_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_bleve_HighlightRequest(handle)
	return handleFromPtr_Slice_string(&op.Fields)
}

//export bleve_HighlightRequest_Fields_Set
func bleve_HighlightRequest_Fields_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_bleve_HighlightRequest(handle)
	op.Fields = deptrFromHandle_Slice_string(val)
}

//export bleve_HighlightRequest_AddField
func bleve_HighlightRequest_AddField(_handle CGoHandle, field *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.HighlightRequest")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.HighlightRequest{})).(*bleve.HighlightRequest).AddField(C.GoString(field))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.HighlightRequest{})).(*bleve.HighlightRequest).AddField(C.GoString(field))
	}
}

// --- wrapping struct: bleve.IndexStat ---
//
//export bleve_IndexStat_CTor
func bleve_IndexStat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_IndexStat(&bleve.IndexStat{}))
}

//export bleve_IndexStat_MarshalJSON
func bleve_IndexStat_MarshalJSON(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.IndexStat")
	if __err != nil {
		return handleFromPtr_Slice_byte(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(bleve.IndexStat{})).(*bleve.IndexStat).MarshalJSON()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_byte(nil)
	}
	return handleFromPtr_Slice_byte(&cret)
}

// --- wrapping struct: bleve.IndexStats ---
//
//export bleve_IndexStats_CTor
func bleve_IndexStats_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_IndexStats(&bleve.IndexStats{}))
}

//export bleve_IndexStats_Register
func bleve_IndexStats_Register(_handle CGoHandle, index CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.IndexStats")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.IndexStats{})).(*bleve.IndexStats).Register(ptrFromHandle_bleve_Index(index))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.IndexStats{})).(*bleve.IndexStats).Register(ptrFromHandle_bleve_Index(index))
	}
}

//export bleve_IndexStats_UnRegister
func bleve_IndexStats_UnRegister(_handle CGoHandle, index CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.IndexStats")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(bleve.IndexStats{})).(*bleve.IndexStats).UnRegister(ptrFromHandle_bleve_Index(index))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(bleve.IndexStats{})).(*bleve.IndexStats).UnRegister(ptrFromHandle_bleve_Index(index))
	}
}

//export bleve_IndexStats_String
func bleve_IndexStats_String(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.IndexStats")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(bleve.IndexStats{})).(*bleve.IndexStats).String())

}

// ---- Slices ---

// ---- Maps ---

// --- wrapping map: bleve.FacetsRequest ---
//
//export bleve_FacetsRequest_CTor
func bleve_FacetsRequest_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_FacetsRequest(&bleve.FacetsRequest{}))
}

//export bleve_FacetsRequest_len
func bleve_FacetsRequest_len(handle CGoHandle) int {
	return len(deptrFromHandle_bleve_FacetsRequest(handle))
}

//export bleve_FacetsRequest_elem
func bleve_FacetsRequest_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_bleve_FacetsRequest(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Ptr_bleve_FacetRequest(v)
}

//export bleve_FacetsRequest_contains
func bleve_FacetsRequest_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_bleve_FacetsRequest(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export bleve_FacetsRequest_set
func bleve_FacetsRequest_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_bleve_FacetsRequest(handle)
	s[C.GoString(_ky)] = ptrFromHandle_Ptr_bleve_FacetRequest(_vl)
}

//export bleve_FacetsRequest_delete
func bleve_FacetsRequest_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_bleve_FacetsRequest(handle)
	delete(s, C.GoString(_ky))
}

//export bleve_FacetsRequest_keys
func bleve_FacetsRequest_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_bleve_FacetsRequest(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

//export bleve_FacetsRequest_Validate
func bleve_FacetsRequest_Validate(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.FacetsRequest")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(*bleve.FacetsRequest).Validate()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

// --- wrapping map: bleve.IndexErrMap ---
//
//export bleve_IndexErrMap_CTor
func bleve_IndexErrMap_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_bleve_IndexErrMap(&bleve.IndexErrMap{}))
}

//export bleve_IndexErrMap_len
func bleve_IndexErrMap_len(handle CGoHandle) int {
	return len(deptrFromHandle_bleve_IndexErrMap(handle))
}

//export bleve_IndexErrMap_elem
func bleve_IndexErrMap_elem(handle CGoHandle, _ky *C.char) *C.char {
	s := deptrFromHandle_bleve_IndexErrMap(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return errorGoToPy(v)
}

//export bleve_IndexErrMap_contains
func bleve_IndexErrMap_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_bleve_IndexErrMap(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export bleve_IndexErrMap_set
func bleve_IndexErrMap_set(handle CGoHandle, _ky *C.char, _vl *C.char) {
	s := deptrFromHandle_bleve_IndexErrMap(handle)
	s[C.GoString(_ky)] = errors.New(C.GoString(_vl))
}

//export bleve_IndexErrMap_delete
func bleve_IndexErrMap_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_bleve_IndexErrMap(handle)
	delete(s, C.GoString(_ky))
}

//export bleve_IndexErrMap_keys
func bleve_IndexErrMap_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_bleve_IndexErrMap(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

//export bleve_IndexErrMap_MarshalJSON
func bleve_IndexErrMap_MarshalJSON(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.IndexErrMap")
	if __err != nil {
		return handleFromPtr_Slice_byte(nil)
	}
	cret, __err := vifc.(*bleve.IndexErrMap).MarshalJSON()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_byte(nil)
	}
	return handleFromPtr_Slice_byte(&cret)
}

//export bleve_IndexErrMap_UnmarshalJSON
func bleve_IndexErrMap_UnmarshalJSON(_handle CGoHandle, data CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*bleve.IndexErrMap")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(*bleve.IndexErrMap).UnmarshalJSON(deptrFromHandle_Slice_byte(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

// ---- Constructors ---

//export bleve_NewSearchRequestOptions
func bleve_NewSearchRequestOptions(q CGoHandle, size C.longlong, myfrom C.longlong, explain C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_bleve_SearchRequest(bleve.NewSearchRequestOptions(ptrFromHandle_query_Query(q), int(size), int(myfrom), boolPyToGo(explain)))

}

//export bleve_NewSearchRequest
func bleve_NewSearchRequest(q CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_bleve_SearchRequest(bleve.NewSearchRequest(ptrFromHandle_query_Query(q)))

}

//export bleve_MultiSearch
func bleve_MultiSearch(ctx CGoHandle, req CGoHandle, indexes CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.MultiSearch(ptrFromHandle_context_Context(ctx), ptrFromHandle_Ptr_bleve_SearchRequest(req), deptrFromHandle_Slice_bleve_Index(indexes)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_bleve_SearchResult(nil)
	}
	return handleFromPtr_Ptr_bleve_SearchResult(cret)
}

//export bleve_NewFacetRequest
func bleve_NewFacetRequest(field *C.char, size C.longlong) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_bleve_FacetRequest(bleve.NewFacetRequest(C.GoString(field), int(size)))

}

//export bleve_NewHighlightWithStyle
func bleve_NewHighlightWithStyle(style *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_bleve_HighlightRequest(bleve.NewHighlightWithStyle(C.GoString(style)))

}

//export bleve_NewHighlight
func bleve_NewHighlight() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_bleve_HighlightRequest(bleve.NewHighlight())

}

//export bleve_NewIndexStats
func bleve_NewIndexStats() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_bleve_IndexStats(bleve.NewIndexStats())

}

// ---- Functions ---

//export bleve_NewMatchQuery
func bleve_NewMatchQuery(match *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_MatchQuery(bleve.NewMatchQuery(C.GoString(match)))

}

//export bleve_NewDocumentDisabledMapping
func bleve_NewDocumentDisabledMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_DocumentMapping(bleve.NewDocumentDisabledMapping())

}

//export bleve_NewDocumentMapping
func bleve_NewDocumentMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_DocumentMapping(bleve.NewDocumentMapping())

}

//export bleve_NewIPFieldMapping
func bleve_NewIPFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewIPFieldMapping())

}

//export bleve_NewMatchAllQuery
func bleve_NewMatchAllQuery() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_MatchAllQuery(bleve.NewMatchAllQuery())

}

//export bleve_NewIndexMapping
func bleve_NewIndexMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_IndexMappingImpl(bleve.NewIndexMapping())

}

//export bleve_NewMatchPhraseQuery
func bleve_NewMatchPhraseQuery(matchPhrase *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_MatchPhraseQuery(bleve.NewMatchPhraseQuery(C.GoString(matchPhrase)))

}

//export bleve_NewRegexpQuery
func bleve_NewRegexpQuery(regexp *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_RegexpQuery(bleve.NewRegexpQuery(C.GoString(regexp)))

}

//export bleve_NewBoolFieldQuery
func bleve_NewBoolFieldQuery(val C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_BoolFieldQuery(bleve.NewBoolFieldQuery(boolPyToGo(val)))

}

//export bleve_NewFuzzyQuery
func bleve_NewFuzzyQuery(term *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_FuzzyQuery(bleve.NewFuzzyQuery(C.GoString(term)))

}

//export bleve_NewGeoPointFieldMapping
func bleve_NewGeoPointFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewGeoPointFieldMapping())

}

//export bleve_NewMatchNoneQuery
func bleve_NewMatchNoneQuery() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_MatchNoneQuery(bleve.NewMatchNoneQuery())

}

//export bleve_NewPhraseQuery
func bleve_NewPhraseQuery(terms CGoHandle, field *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_PhraseQuery(bleve.NewPhraseQuery(deptrFromHandle_Slice_string(terms), C.GoString(field)))

}

//export bleve_Open
func bleve_Open(path *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.Open(C.GoString(path))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_bleve_Index(nil)
	}
	return handleFromPtr_bleve_Index(cret)
}

//export bleve_NewGeoBoundingBoxQuery
func bleve_NewGeoBoundingBoxQuery(topLeftLon C.double, topLeftLat C.double, bottomRightLon C.double, bottomRightLat C.double) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_GeoBoundingBoxQuery(bleve.NewGeoBoundingBoxQuery(float64(topLeftLon), float64(topLeftLat), float64(bottomRightLon), float64(bottomRightLat)))

}

//export bleve_NewGeoShapeCircleQuery
func bleve_NewGeoShapeCircleQuery(coordinates CGoHandle, radius *C.char, relation *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.NewGeoShapeCircleQuery(deptrFromHandle_Slice_float64(coordinates), C.GoString(radius), C.GoString(relation))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_query_GeoShapeQuery(nil)
	}
	return handleFromPtr_Ptr_query_GeoShapeQuery(cret)
}

//export bleve_NewGeoShapeQuery
func bleve_NewGeoShapeQuery(coordinates CGoHandle, typ *C.char, relation *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.NewGeoShapeQuery(deptrFromHandle_Slice_Slice_Slice_Slice_float64(coordinates), C.GoString(typ), C.GoString(relation))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_query_GeoShapeQuery(nil)
	}
	return handleFromPtr_Ptr_query_GeoShapeQuery(cret)
}

//export bleve_OpenUsing
func bleve_OpenUsing(path *C.char, runtimeConfig CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.OpenUsing(C.GoString(path), deptrFromHandle_Map_string_interface_(runtimeConfig))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_bleve_Index(nil)
	}
	return handleFromPtr_bleve_Index(cret)
}

//export bleve_NewQueryStringQuery
func bleve_NewQueryStringQuery(q *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_QueryStringQuery(bleve.NewQueryStringQuery(C.GoString(q)))

}

//export bleve_NewTermQuery
func bleve_NewTermQuery(term *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_TermQuery(bleve.NewTermQuery(C.GoString(term)))

}

//export bleve_NewDateTimeFieldMapping
func bleve_NewDateTimeFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewDateTimeFieldMapping())

}

//export bleve_NewDocIDQuery
func bleve_NewDocIDQuery(ids CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_DocIDQuery(bleve.NewDocIDQuery(deptrFromHandle_Slice_string(ids)))

}

//export bleve_NewGeoDistanceQuery
func bleve_NewGeoDistanceQuery(lon C.double, lat C.double, distance *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_GeoDistanceQuery(bleve.NewGeoDistanceQuery(float64(lon), float64(lat), C.GoString(distance)))

}

//export bleve_NewIPRangeQuery
func bleve_NewIPRangeQuery(cidr *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_IPRangeQuery(bleve.NewIPRangeQuery(C.GoString(cidr)))

}

//export bleve_NewNumericFieldMapping
func bleve_NewNumericFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewNumericFieldMapping())

}

//export bleve_NewPrefixQuery
func bleve_NewPrefixQuery(prefix *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_PrefixQuery(bleve.NewPrefixQuery(C.GoString(prefix)))

}

//export bleve_SetLog
func bleve_SetLog(l CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go bleve.SetLog(ptrFromHandle_Ptr_log_Logger(l))
	} else {
		bleve.SetLog(ptrFromHandle_Ptr_log_Logger(l))
	}
}

//export bleve_MemoryNeededForSearchResult
func bleve_MemoryNeededForSearchResult(req CGoHandle) C.ulonglong {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.ulonglong(bleve.MemoryNeededForSearchResult(ptrFromHandle_Ptr_bleve_SearchRequest(req)))

}

//export bleve_NewBooleanQuery
func bleve_NewBooleanQuery() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_BooleanQuery(bleve.NewBooleanQuery())

}

//export bleve_NewGeoShapeFieldMapping
func bleve_NewGeoShapeFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewGeoShapeFieldMapping())

}

//export bleve_NewTextFieldMapping
func bleve_NewTextFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewTextFieldMapping())

}

//export bleve_NewMemOnly
func bleve_NewMemOnly(mapping CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.NewMemOnly(ptrFromHandle_mapping_IndexMapping(mapping))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_bleve_Index(nil)
	}
	return handleFromPtr_bleve_Index(cret)
}

//export bleve_NewTermRangeQuery
func bleve_NewTermRangeQuery(min *C.char, max *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_TermRangeQuery(bleve.NewTermRangeQuery(C.GoString(min), C.GoString(max)))

}

//export bleve_New
func bleve_New(path *C.char, mapping CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.New(C.GoString(path), ptrFromHandle_mapping_IndexMapping(mapping))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_bleve_Index(nil)
	}
	return handleFromPtr_bleve_Index(cret)
}

//export bleve_NewConjunctionQuery
func bleve_NewConjunctionQuery(conjuncts CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_ConjunctionQuery(bleve.NewConjunctionQuery(deptrFromHandle_Slice_query_Query(conjuncts)...))

}

//export bleve_NewDateRangeQuery
func bleve_NewDateRangeQuery(start CGoHandle, end CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_DateRangeQuery(bleve.NewDateRangeQuery(*ptrFromHandle_time_Time(start), *ptrFromHandle_time_Time(end)))

}

//export bleve_NewDocumentStaticMapping
func bleve_NewDocumentStaticMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_DocumentMapping(bleve.NewDocumentStaticMapping())

}

//export bleve_NewKeywordFieldMapping
func bleve_NewKeywordFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewKeywordFieldMapping())

}

//export bleve_NewUsing
func bleve_NewUsing(path *C.char, mapping CGoHandle, indexType *C.char, kvstore *C.char, kvconfig CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.NewUsing(C.GoString(path), ptrFromHandle_mapping_IndexMapping(mapping), C.GoString(indexType), C.GoString(kvstore), deptrFromHandle_Map_string_interface_(kvconfig))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_bleve_Index(nil)
	}
	return handleFromPtr_bleve_Index(cret)
}

//export bleve_NewWildcardQuery
func bleve_NewWildcardQuery(wildcard *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_WildcardQuery(bleve.NewWildcardQuery(C.GoString(wildcard)))

}

//export bleve_NewBooleanFieldMapping
func bleve_NewBooleanFieldMapping() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_mapping_FieldMapping(bleve.NewBooleanFieldMapping())

}

//export bleve_NewBuilder
func bleve_NewBuilder(path *C.char, mapping CGoHandle, config CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.NewBuilder(C.GoString(path), ptrFromHandle_mapping_IndexMapping(mapping), deptrFromHandle_Map_string_interface_(config))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_bleve_Builder(nil)
	}
	return handleFromPtr_bleve_Builder(cret)
}

//export bleve_NewDisjunctionQuery
func bleve_NewDisjunctionQuery(disjuncts CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_query_DisjunctionQuery(bleve.NewDisjunctionQuery(deptrFromHandle_Slice_query_Query(disjuncts)...))

}

//export bleve_NewGeometryCollectionQuery
func bleve_NewGeometryCollectionQuery(coordinates CGoHandle, types CGoHandle, relation *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := bleve.NewGeometryCollectionQuery(deptrFromHandle_Slice_Slice_Slice_Slice_Slice_float64(coordinates), deptrFromHandle_Slice_string(types), C.GoString(relation))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_query_GeoShapeQuery(nil)
	}
	return handleFromPtr_Ptr_query_GeoShapeQuery(cret)
}
